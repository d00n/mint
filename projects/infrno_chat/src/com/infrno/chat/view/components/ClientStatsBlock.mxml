<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 creationComplete="handleCreationComplete(event);"				 
				 >
	<fx:Script>
		<![CDATA[			
			import com.infrno.chat.model.vo.StatsVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Spacer;
			
			public var client_suid:String;		
			
			private var _clientStats:Object;
			private var _client_serverStatsVO:StatsVO;
			private var _client_peerStatsVO:StatsVO;
			
			[Bindable]
			public var user_name_label:String;
			
			[Bindable]
			public var droppedFrames_label:String;
			
			[Bindable]
			public var peer_enabled_label:String;
			
			[Bindable]
			public var peer_capable_label:String;
			
			[Bindable]
			public var use_peer_connection_label:String;
			
			[Bindable]
			public var micLevel_label:String;
			
			[Bindable]
			public var peer_count_label:String;
			
			[Bindable]
			public var publishing_audio_label:String;
			
			[Bindable]
			public var publishing_video_label:String;
			
			[Bindable]
			public var user_name_label_id_toolTip:String;
			
			private var client_sparklineConfig_AC:ArrayCollection = new ArrayCollection();
//			private var labelConfig_AC:ArrayCollection = new ArrayCollection();

			private function initConfig():void{
				client_sparklineConfig_AC.addItem( {yFieldName:"currentBytesPerSecond", labelPrefix:"B/s", toolTip:"Specifies the rate at which the NetStream buffer is filled in bytes per second. The value is calculated as a smooth average for the total data received in the last second."} );
				client_sparklineConfig_AC.addItem( {yFieldName:"maxBytesPerSecond", labelPrefix:"Max B/s", toolTip:"Specifies the maximum rate at which the NetStream buffer is filled in bytes per second. This value provides information about the capacity of the client network based on the last messages received by the NetStream object. Depending on the size of the buffer specified in NetStream.bufferTime and the bandwidth available on the client, Flash Media Server fills the buffer in bursts. This property provides the maximum rate at which the client buffer is filled."} );
//				sparklineConfig_AC.addItem( {yFieldName:"audioBytesPerSecond", labelPrefix:"Audio", toolTip:"Specifies the rate at which the NetStream audio buffer is filled in bytes per second. The value is calculated as a smooth average for the audio data received in the last second."} );
//				sparklineConfig_AC.addItem( {yFieldName:"videoBytesPerSecond", labelPrefix:"Video", toolTip:"Specifies the rate at which the NetStream buffer is filled in bytes per second. The value is calculated as a smooth average for the total data received in the last second."} );
//				sparklineConfig_AC.addItem( {yFieldName:"dataBytesPerSecond", labelPrefix:"Data", toolTip:"Specifies the maximum rate at which the NetStream buffer is filled in bytes per second. This value provides information about the capacity of the client network based on the last messages received by the NetStream object. Depending on the size of the buffer specified in NetStream.bufferTime and the bandwidth available on the client, Flash Media Server fills the buffer in bursts. This property provides the maximum rate at which the client buffer is filled."} );
				client_sparklineConfig_AC.addItem( {yFieldName:"audioLossRate", labelPrefix:"Audio loss", toolTip:"Specifies the audio loss for the NetStream session. This value returns a valid value only for RTMFP streams and would return 0 for RTMP streams. Loss rate is defined as the ratio of lost messages to total messages."} );			
				
//				labelConfig_AC.addItem( {yFieldName:"droppedFrames", labelPrefix:"Dropped frames", toolTip:"Returns the number of video frames dropped in the current NetStream playback session. In recorded streaming or progressive download, if the video is a high-quality or high-resolution, high-bitrate video, the decoder can lag behind in decoding the required number of frames per second if it does not have adequate system CPU resources. In live streaming, the buffer drops video frames if the latency is too high. This property specifies the number of frames that were dropped and not presented normally."} );			
			}			
			
			public function set client_serverStatsVO(value:StatsVO):void{
				if (serverSparkline_vgroup == null)
					return;
				
				_client_serverStatsVO = value;
				var sparkline:Sparkline;
				for (var i:int=0; i<serverSparkline_vgroup.numChildren-1; i++){
					sparkline = serverSparkline_vgroup.getChildAt(i) as Sparkline;
					sparkline.statsVO = _client_serverStatsVO;
					sparkline.lastValue_label = sparkline.lastValuePrefix +": "+ _client_serverStatsVO.lastDataRecord[sparkline.yFieldName];						
				}				
				
				droppedFrames_label = "Dropped frames: " + _client_serverStatsVO.lastDataRecord['droppedFrames'];				
			}
			
			public function set clientStats(value:Object):void{
				_clientStats = value;
				micLevel_label							= "Mic level: " + _clientStats.mic_level;				
				peer_enabled_label 					= "Peer enabled: " + _clientStats.peer_enabled;				
				peer_capable_label					= "Peer capable: " + _clientStats.peer_capable;				
				publishing_audio_label			= "Publishing audio: " + _clientStats.publishing_audio;				
				publishing_video_label			= "Publishing video: " + _clientStats.publishing_video;				
				use_peer_connection_label 	= "Use peer connection: " + _clientStats.use_peer_connection;		
				peer_count_label 						= "Peer count: " + _clientStats.peer_count;		
				user_name_label_id_toolTip 	= _clientStats.capabilities;	
			}			
			
			// TODO What is best place/time to do this?
			private function handleCreationComplete(event:Event):void	{	
//				trace("ClientStatsBlock.handleCreationComplete()")
				initConfig();
				createSparklineBlock();				
			}
			
			public function createSparklineBlock():void{
				var yFieldName:String;
				var labelPrefix:String;
				var toolTip:String;
				var sparklineConfig:Object;
				for (var i:int = 0; i < client_sparklineConfig_AC.length; i++) {
					sparklineConfig = client_sparklineConfig_AC.getItemAt(i);
					yFieldName 			= sparklineConfig.yFieldName;
					labelPrefix 		= sparklineConfig.labelPrefix;
					toolTip 				= sparklineConfig.toolTip;
					createSparkline(serverSparkline_vgroup,yFieldName, labelPrefix, toolTip);
				}
			
				// without this, the last sparkline to be added does not display, although it's tooltip works
				serverSparkline_vgroup.addElement(new Spacer());	
			}
			
			// WARNING: instantiating Sparkline in the mediator causes the backward/outside container display bug
			public function createSparkline(sparkline_vgroup:VGroup, yFieldName:String, labelPrefix:String="", toolTip:String=""):void {
				var _sparkline:Sparkline 		= new Sparkline(); 
				_sparkline.yFieldName 			= yFieldName;
				_sparkline.lastValuePrefix 	= labelPrefix;
				_sparkline.toolTip			 		= toolTip;
				_sparkline.width 						= serverBlock_vgroup.width;
				
				sparkline_vgroup.addElement(_sparkline);	
			}						
			
			
		]]>
	</fx:Script>	
		<s:BorderContainer id="borderContainer"
											 backgroundColor="#FFFFFF" 
											 borderColor="#ececec"
											 width="100%" 
											 >
	
			<s:HGroup>			
				<s:VGroup id="serverBlock_vgroup" 										 
									width="175"
									>			
					<s:Label text="{user_name_label}"
									 id = "user_name_label_id"
									 paddingTop="3"
									 paddingLeft="3"
									 paddingRight="3"
									 toolTip="{user_name_label_id_toolTip}"
									 backgroundColor="0xFFFFFF" />		
					
					<s:Label text="{droppedFrames_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 toolTip="Returns the number of video frames dropped in the current NetStream playback session. In recorded streaming or progressive download, if the video is a high-quality or high-resolution, high-bitrate video, the decoder can lag behind in decoding the required number of frames per second if it does not have adequate system CPU resources. In live streaming, the buffer drops video frames if the latency is too high. This property specifies the number of frames that were dropped and not presented normally."
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{peer_enabled_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{peer_capable_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{use_peer_connection_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{publishing_audio_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{publishing_video_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{micLevel_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 toolTip="The amount of sound the microphone is detecting. Values range from 0 (no sound is detected) to 100 (very loud sound is detected). The value of this property can help you determine a good value to pass to the Microphone.setSilenceLevel() method. If the microphone is available but is not yet being used because Microphone.getMicrophone() has not been called, this property is set to -1."
									 backgroundColor="0xFFFFFF" />
					
					<s:Label text="{peer_count_label}"
									 paddingLeft="3"
									 paddingRight="3"
									 fontSize="11"
									 backgroundColor="0xFFFFFF" />
					
				</s:VGroup>
				
				<s:VGroup width="175" >
					<s:Label text="Server"
									 paddingTop="3"
									 backgroundColor="0xFFFFFF" />	
					

					<s:VGroup id="serverSparkline_vgroup"  	
										left="0" />
						
						
				</s:VGroup>

						
				<s:List id="peerStatsBlock_list" 
								itemRenderer="spark.skins.spark.DefaultComplexItemRenderer"
								horizontalCenter="0"
								verticalCenter="0"
								borderColor="#FFFFFF"
								>
					
					<s:layout>
						<s:HorizontalLayout gap="0"/>
					</s:layout>
					
					<s:dataProvider >
						<s:ArrayList>
						</s:ArrayList>
					</s:dataProvider>
					
				</s:List>			
				
			</s:HGroup>
			
		</s:BorderContainer>
	
</s:Group>
