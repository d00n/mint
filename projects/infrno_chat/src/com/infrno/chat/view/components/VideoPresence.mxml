<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:com.infrno.chat.view.components="com.infrno.chat.view.components.*"
		 creationComplete="handleCreationComplete(event);"
		 >

	<fx:Script>
		<![CDATA[
			import com.infrno.chat.model.events.SettingsEvent;
			import com.infrno.chat.model.events.VideoPresenceEvent;
			import com.infrno.chat.model.vo.PeerStatsVO;
			import com.infrno.chat.model.vo.UserInfoVO;
			
			import mx.collections.ArrayCollection;
			
//			private var m_audioLevel:int;
			private var _initialized:Boolean = false;
			private var _is_local:Boolean;
			private var _camera:Camera;
			
//			private var _audio_level	:int;
			
			[Bindable]
			public var peerStatsVO:PeerStatsVO;
			
			[Bindable]
			public var last_ping_value:String;
			
			[Bindable]
			public var line_stroke_color:String;
			
			[Bindable]
			private var emptyArrayToRemoveChartLines:Array = new Array();
			
			private var _userInfoVO:UserInfoVO;
			private var _video:Video;
			
			public function get video():Video
			{
				if(_video == null){
					_video = new Video(160,120);
					video_holder.addChild(_video);
				}
				return _video;
			}
			
			public function get userInfoVO():UserInfoVO
			{
				return _userInfoVO;
			}
			
			public function set userInfoVO(info:UserInfoVO):void
			{
				_userInfoVO = info;
			}
			
			public function get is_local():Boolean
			{
				return _is_local;
			}
			
			public function set is_local(b:Boolean):void
			{
				if( null != wrenchToggleButton ) 
				{
					wrenchToggleButton.visible = b;
				}
				_is_local = b;
			}
			
			public function set camera(cam:Camera):void
			{
				if(_camera == cam)
					return;
				
				_camera = cam;
			}
			
			public function set netstream(ns:NetStream):void
			{
				video.attachCamera(null);
				video.attachNetStream(ns);
			}

			private function initializeAudio( ) : void 
			{
				if( _is_local ) 
				{
					dispatchEvent( new VideoPresenceEvent( VideoPresenceEvent.AUDIO_UNMUTED, true ) );
					return;
				}
				
				if( hasNetStream( ) ) 
				{
					setAudioLevel( 90 );
					_userInfoVO.netStream.receiveAudio( false );
				}
			}	
					
			public function isInitialized( ) : Boolean 
			{
				return _initialized;
			}
			
			public function toggleAudio():void
			{
				trace( "VideoPresence.toggleAudio()" );
				if(audioToggleButton.selected){
					if(_is_local){
						dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_MUTED,true))
					} else {
						if(_userInfoVO.netStream!=null){
							setAudioLevel(0,true);
							_userInfoVO.netStream.receiveAudio(false);
						}
					}
				} else {
					if(_is_local){
						dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_UNMUTED,true))
					} else {
						if(_userInfoVO.netStream!=null){
							setAudioLevel(audio_level.value);
							_userInfoVO.netStream.receiveAudio(true);
						}
					}
						
				}
			}
			
			private function initializeVideo( ) : void 
			{
				if( _is_local )
				{
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_UNMUTED,true));
					video.attachCamera(_camera);
					video.visible = true;
					return;
				} 
				
				if( hasNetStream( ) )
				{
					_userInfoVO.netStream.receiveVideo(true);
					video.visible = true;
				}
			}
			
			public function toggleVideo():void
			{
				trace("VideoPresence.toggleVideo()");
				
				//if( null == videoToggleButton ) 
				//{
				//	video.visible = true;
				//	return;
				//}
				
				//if using peer then we are unable to request a receiveAudio/Video false.. we'd just need to hide it
				if( videoToggleButton.selected ){
					if( _is_local ){
						dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_MUTED,true));
						video.attachCamera(null)
					} else {
						if(_userInfoVO.netStream!=null)
							_userInfoVO.netStream.receiveVideo(false);
					}
					video.visible = false;
				} else {
					if(_is_local){
						dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_UNMUTED,true));
						video.attachCamera(_camera);
					} else {
						if(_userInfoVO.netStream!=null)
							_userInfoVO.netStream.receiveVideo(true);
					}
					
					video.visible = true;
				}
			}
			
			/**
			 * Private functions
			 */
			
			private function adjustVolume():void
			{
				if(_userInfoVO.netStream != null)
					setAudioLevel(audio_level.value);
			}
			
			private function handleCreationComplete(event:Event):void
			{
				currentState="hideControls";
				_initialized = true;
				wrenchToggleButton.visible = _is_local;
			}
			
			private function handleMouseOver(event:Event):void 
			{
				if( currentState == "usingControls" ) 
				{
					return;
				}

				stateShowControls( );	
			}
			
			private function handleMouseOut(event:Event):void
			{
				if( currentState == "usingControls" ) 
				{
					return;
				}
				
				stateHideControls( );
			}
			
			
			private function stateShowControls( ) : void {
				currentState = "showControls";
				
				audioToggleButton.alpha = 1
				videoToggleButton.alpha = 1
				wrenchToggleButton.alpha = 1
				peerStatsChart.alpha = 1;
				last_ping_value_label.alpha = 1;
			}
			
			private function stateUsingControls( ) : void {
				currentState = "usingControls";
				
				audioToggleButton.alpha = 1
				videoToggleButton.alpha = 1
				wrenchToggleButton.alpha = 1
				peerStatsChart.alpha = 1;
				last_ping_value_label.alpha = 1;
			}
			
			private function stateHideControls( ) : void {
				currentState = "hideControls";
				
				audioToggleButton.alpha = .2
				videoToggleButton.alpha = .2
				wrenchToggleButton.alpha = .2
//				peerStatsChart.alpha = .2;
//				last_ping_value_label.alpha = .2;
			}
			
			private function handleMouseOverControls(event:Event):void 
			{
				stateUsingControls( );
			}
			
			private function handleMouseOutControls(event:Event):void
			{
				stateShowControls( );
			}
			
			public function handleShowSettings():void
			{
				dispatchEvent( new SettingsEvent( SettingsEvent.SHOW_SETTINGS ) );
			}
			
			private function setAudioLevel(levelIn:Number,force:Boolean=false):void
			{
				if( audioToggleButton.selected && !force ) { 
					return;
				}
				
				if(_is_local){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_LEVEL,true,levelIn));
					return;
				}
				
				if( !hasNetStream( ) ) 
				{
					//not initialized
					return;  
				}
				
				// Peer audio is set here. Where does _data get assigned?
				var curr_transform:SoundTransform = _userInfoVO.netStream.soundTransform;
				curr_transform.volume = levelIn/100;
				_userInfoVO.netStream.soundTransform = curr_transform;
				
			}
			
			private function hasNetStream( ):Boolean
			{
				if( null == _userInfoVO ) 
				{
					//not initialized
					return false;  
				}
				
				if( null == _userInfoVO.netStream ) 
				{
					//no camera attached to this video feed
					return false;
				}
				
				return true;
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="showControls" />
		<s:State name="usingControls" />
		<s:State name="hideControls" />
	</s:states>

	<s:BorderContainer
		id="borderContainer"
		backgroundColor="#ffffff" 
		borderColor="#cecece"
		width="162" 
		height="135"
		mouseOver="handleMouseOver(event);"
		mouseOut="handleMouseOut(event);">
		<s:Rect 
			id="background" 
			width="160" 
			height="120">
	        <s:fill>
	            <s:SolidColor color="#000000"/>
	        </s:fill>
	    </s:Rect>
		
		<mx:UIComponent 
			id="video_holder" 
			width="160" 
			height="120" />		
		
		<s:HGroup 
			id="customDataLabel"
			top="15"
			height="20"
			width="100%"
			paddingLeft="2" 
			paddingTop="0"
			paddingBottom="0"
			gap="0"
			verticalAlign="middle"
			includeIn="showControls, usingControls, hideControls"
			mouseOver="handleMouseOverControls(event);"
			mouseOut="handleMouseOutControls(event);">
			
				<s:Label id="last_ping_value_label" 
									text="{last_ping_value}"
									paddingTop="3"
									paddingLeft="3"
									paddingRight="3"
									alpha="1"
									backgroundColor="0xFFFFFF" />
			
			</s:HGroup> 

		<s:HGroup 
			id="statsContainer"
			top="15"
			height="20"
			width="100%"
			paddingLeft="2" 
			paddingTop="0"
			paddingBottom="0"
			gap="0"
			verticalAlign="middle"
			includeIn="showControls, usingControls, hideControls"
			mouseOver="handleMouseOverControls(event);"
			mouseOut="handleMouseOutControls(event);">

			<mx:LineChart 
				id="peerStatsChart"		
				dataProvider="{peerStatsVO.data_array}"
				backgroundElements="{emptyArrayToRemoveChartLines}"
				toolTip="Ping"
				width="100%"
				height="50"
				alpha=".2">
				
				<mx:horizontalAxis>
					<mx:CategoryAxis id="categoryAxis" />
				</mx:horizontalAxis>
				
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer 
						axis="{categoryAxis}"
						showLine="false"
						showLabels="false"
						tickPlacement="none" >
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer 
						axis="{categoryAxis}"
						showLine="false"
						showLabels="false"
						tickPlacement="none" >
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				
				<mx:series>
					<mx:LineSeries 
						id="srtt_lineSeries"
						yField="srtt">	
						<mx:lineStroke>
							<mx:SolidColorStroke color="{line_stroke_color}"  weight="1"/>
						</mx:lineStroke>
					</mx:LineSeries>
				</mx:series>
				
			</mx:LineChart> 
		</s:HGroup>		
		
		<s:HGroup 
			id="controlsContainer"
			bottom="15"
			height="20"
			width="100%"
			paddingLeft="2" 
			paddingTop="0"
			paddingBottom="0"
			gap="0"
			verticalAlign="middle"
			includeIn="showControls, usingControls, hideControls"
			mouseOver="handleMouseOverControls(event);"
			mouseOut="handleMouseOutControls(event);">
			<com.infrno.chat.view.components:ImageToggleButton
				styleName="videoToggleButton"
				id="videoToggleButton"
				click="toggleVideo( )"
				toolTip="Toggle video"
				width="20"
				height="20"
				alpha=".2"/>
			<mx:Spacer width="2" />
			<com.infrno.chat.view.components:ImageToggleButton
				styleName="audioToggleButton"
				id="audioToggleButton"
				click="toggleAudio()" 
				toolTip="Toggle mute"
				width="20"
				height="20"
				alpha=".2" />			
			<mx:Spacer width="2" />
			<com.infrno.chat.view.components:ImageToggleButton
				styleName="wrenchToggleButton"
				id="wrenchToggleButton"
				click="handleShowSettings()" 
				toolTip="Show settings"
				width="20"
				height="20"
				alpha=".2" />
			<mx:Spacer width="2" />
		</s:HGroup>
		
		<s:HSlider
			id="audio_level" 
			showDataTip="false" 
			value="75" 
			maximum="100" 
			width="100%"
			height="10"
			bottom="0"
			left="0"
			change="adjustVolume( )"/>
		
	</s:BorderContainer>
	<mx:Spacer height="2" />
</s:Group>
