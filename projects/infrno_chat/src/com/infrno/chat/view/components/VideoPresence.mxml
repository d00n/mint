<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:com.infrno.chat.view.components="com.infrno.chat.view.components.*"
		 initialize="handleInitialize(event);" 
		 >
	<!-- creationComplete="handleCreationComplete(event);" -->


	<fx:Script>
		<![CDATA[
			import com.infrno.chat.model.events.SettingsEvent;
			import com.infrno.chat.model.events.VideoPresenceEvent;
			import com.infrno.chat.model.vo.StatsVO;
			import com.infrno.chat.model.vo.UserInfoVO;
			
			import mx.collections.ArrayCollection;
			
//			private var _initialized:Boolean = false;
			private var _is_local:Boolean;
			private var _camera:Camera;
			private var _userInfoVO:UserInfoVO;
			private var _video:Video;
			public var sparkline:Sparkline;
			
			[Bindable]
			private var user_name_label:String;
			
			[Bindable]
			public var audio_level_value:Number = 85;
			
//			[Bindable]
//			public var wrenchToggleButton_visible:Boolean = false;
						
			[Bindable]
			public var audioToggle_selected:Boolean = false;
			
			[Bindable]
			public var videoToggle_selected:Boolean = false;
			
			public function get video():Video	{
				if(_video == null){
					_video = new Video(160,120);
					video_holder.addChild(_video);
				}
				return _video;
			}

			public function get userInfoVO():UserInfoVO	{
				return _userInfoVO;
			}			
			public function set userInfoVO(info:UserInfoVO):void{
				_userInfoVO = info;
				
				user_name_label = _userInfoVO.user_name;
			}
			
			public function get is_local():Boolean	{
				return _is_local;
			}			
			public function set is_local(value:Boolean):void {
				_is_local = value;
			}
			
			public function set camera(cam:Camera):void	{
				if(_camera == cam)
					return;
				
				_camera = cam;
			}
			
			public function set netstream(value:NetStream):void {
				video.attachCamera(null);
				video.attachNetStream(value);
			}

			private function initializeAudio():void	{
				if( is_local ) {
					dispatchEvent( new VideoPresenceEvent( VideoPresenceEvent.AUDIO_UNMUTED, true ) );
					return;
				}
				
				if( hasNetStream() ) {
					setAudioLevel( 90 );
					_userInfoVO.netStream.receiveAudio( false );
				}
			}	
					
//			public function isInitialized():Boolean	{
//				return _initialized;
//			}
			
			public function toggleAudio():void {
				trace( "VideoPresence.toggleAudio() about to toggle audioToggle_selected=" +audioToggle_selected );

				audioToggle_selected = !audioToggle_selected;
				
				if(audioToggle_selected){
					muteAudio();
				} else {
					playAudio();
				}				
			}
			
			public function playAudio():void{
				// this is necessary because VideosGroupMediator calls this function on startup/reconnect
				if (videoToggle_selected)
					return;
				
				if(is_local){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_UNMUTED,true))
				} else {
					if(_userInfoVO.netStream!=null){
						setAudioLevel(audio_level_value);
						_userInfoVO.netStream.receiveAudio(true);
					}
				}
			}
			
			public function muteAudio():void{
				if(is_local){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_MUTED,true))
				} else {
					if(_userInfoVO.netStream!=null){
						setAudioLevel(0,true);
						_userInfoVO.netStream.receiveAudio(false);
					}
				}
			}		
			
			public function toggleVideo():void {
				videoToggle_selected = !videoToggle_selected;
							
				//if using peer then we are unable to request a receiveAudio/Video false.. we'd just need to hide it
				// ... what?
				
				if( videoToggle_selected ){
					hideVideo();
				} else {
					playVideo();
				}
			}
			
			public function playVideo():void{
				// this is necessary because VideosGroupMediator calls this function on startup/reconnect
				if (videoToggle_selected)
					return;

				if(is_local){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_UNMUTED,true));
					video.attachCamera(_camera);
				} else {
					if(_userInfoVO.netStream!=null)
						_userInfoVO.netStream.receiveVideo(true);
				}				
				video.visible = true;
			}
			
			public function hideVideo():void{
				if( is_local ){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_MUTED,true));
					video.attachCamera(null)
				} else {
					if(_userInfoVO.netStream!=null)
						_userInfoVO.netStream.receiveVideo(false);
				}
				video.visible = false;
			}
			
			

//			private function initializeVideo():void	{
//				trace(">>>>>>>>>>>>>>>>>>>>>>   VideoPresence.initializeVideo");
//				if( is_local )	{
//					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.VIDEO_UNMUTED,true));
//					video.attachCamera(_camera);
//					video.visible = true;
//					return;
//				} 
//				
//				if( hasNetStream() ) {
//					_userInfoVO.netStream.receiveVideo(true);
//					video.visible = true;
//				}
//			}

			
			
			private function adjustVolume():void {
				if(_userInfoVO.netStream != null)
					setAudioLevel(audio_level_value);
			}

//			private function handleCreationComplete(event:Event):void	{
//				_initialized = true;
//			}
			
			private function controlsContainer_handleCreationComplete(event:Event):void	{
				if (is_local) {
					audio_level.toolTip = "Your mic level";
					wrenchToggleButton.visible = true;
				} else {
					audio_level.toolTip = "Volume";
					wrenchToggleButton.visible = false;
				}
			}
			
			private function handleInitialize(event:Event):void{
				// UGLY Gotta be a better way to create this stuff.
				sparkline = new Sparkline();
				sparkline.top = 2;
				sparkline.left = 2;
				borderContainer.addElement(sparkline);				
			}
			
			public function handleShowSettings():void	{
				dispatchEvent( new SettingsEvent( SettingsEvent.SHOW_SETTINGS ) );
			}
			
			private function setAudioLevel(levelIn:Number,force:Boolean=false):void	{
				if( audioToggle_selected && !force ) { 
					return;
				}
				
				if(is_local){
					dispatchEvent(new VideoPresenceEvent(VideoPresenceEvent.AUDIO_LEVEL,true,levelIn));
					return;
				}
				
				if( !hasNetStream() ) 	{
					//not initialized
					return;  
				}
				
				var curr_transform:SoundTransform = _userInfoVO.netStream.soundTransform;
				curr_transform.volume = levelIn/100;
				_userInfoVO.netStream.soundTransform = curr_transform;
				
			}
			
			private function hasNetStream():Boolean	{
				if( null == _userInfoVO ) {
					//not initialized
					return false;  
				}
				
				if( null == _userInfoVO.netStream ) {
					//no camera attached to this video feed
					return false;
				}
				
				return true;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="hideControls" />
		<s:State name="showControls" />
	</s:states>

	<s:BorderContainer id="borderContainer"
		backgroundColor="#ffffff" 
		borderColor="#cecece"
		width="162" 
		height="120"
		mouseOver='currentState = "showControls";'
		rollOut='currentState = "hideControls";'>
		
		<s:Rect id="background" 
			width="160" 
			height="120">
	        <s:fill>
	            <s:SolidColor color="#000000"/>
	        </s:fill>
	    </s:Rect>
		
		<mx:UIComponent id="video_holder" 
			width="160" 
			height="120" />		
		
		<s:HGroup id="controlsContainer"
			bottom="2"
			height="20"
			width="100%"
			paddingLeft="2" 
			paddingTop="0"
			paddingBottom="0"
			gap="0"
			verticalAlign="middle" 
			includeIn="showControls"
			creationComplete="controlsContainer_handleCreationComplete(event);"
			>
			
			<com.infrno.chat.view.components:ImageToggleButton id="videoToggleButton"
																												 selected = "{videoToggle_selected}"
																												 styleName="videoToggleButton"				
																												 click="toggleVideo()"
																												 toolTip="Toggle video"
																												 width="20"
																												 height="20"/>
			
			<mx:Spacer width="2" />
			
			<com.infrno.chat.view.components:ImageToggleButton id="audioToggleButton" 
																												 selected = "{audioToggle_selected}"
																												 styleName="audioToggleButton"				
																												 click="toggleAudio()" 
																												 toolTip="Mute"
																											 	 width="20"
																											 	 height="20" />			
			
			<mx:Spacer width="2" />
			
			<com.infrno.chat.view.components:ImageToggleButton id="wrenchToggleButton"
				styleName="wrenchToggleButton"
				click="handleShowSettings()" 
				toolTip="Settings"
				width="20"
				height="20"/>
			
			<mx:Spacer width="2" />

			<s:HSlider id="audio_level" 
				showDataTip="false" 
				value="{audio_level_value}" 
				maximum="100" 
				width="100%"
				height="10"
				bottom="0"
				left="0"
				change="adjustVolume( )"/>		
			
			<mx:Spacer width="2" />		
		</s:HGroup>
		
		<s:Label id="user_name_label_id"
						 text="{user_name_label}"
						 bottom="2"
						 left="2"
						 paddingLeft="2" 	
						 paddingTop="2" 	
						 backgroundColor="0xf5f5f5"
						 includeIn="hideControls"
						 />
		
		
		
	</s:BorderContainer>
</s:Group>
