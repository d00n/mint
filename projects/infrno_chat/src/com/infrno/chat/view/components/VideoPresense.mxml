<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:com.infrno.chat.view.components="com.infrno.chat.view.components.*"
		 creationComplete="handleCreationComplete(event);"
		 >
	<fx:Script>
		<![CDATA[
			import com.infrno.chat.model.events.VideoPresenseEvent;
			import com.infrno.chat.model.vo.UserInfoVO;
			
			private var m_audioLevel    :int;
			private var m_initialized 	:Boolean = false;
			private var _is_local		:Boolean;
			private var _camera			:Camera;
			
			private var _audio_level	:int;
			
			private var _data			:UserInfoVO;
			private var _video			:Video;
			
			public function get video():Video
			{
				if(_video == null){
					_video = new Video(160,120);
					video_holder.addChild(_video);
				}
				return _video;
			}
			
			public function get data():UserInfoVO
			{
				return _data;
			}
			
			public function set data(info:UserInfoVO):void
			{
				_data = info;
			}
			
			public function get is_local():Boolean
			{
				return _is_local;
			}
			
			public function set is_local(b:Boolean):void
			{
				_is_local = b;
			}
			
			public function set camera(cam:Camera):void
			{
				if(_camera == cam)
					return;
				
				_camera = cam;
			}
			
			public function set netstream(ns:NetStream):void
			{
				video.attachCamera(null);
				video.attachNetStream(ns);
			}

			private function initializeAudio( ) : void 
			{
				if( _is_local ) 
				{
					dispatchEvent( new VideoPresenseEvent( VideoPresenseEvent.AUDIO_UNMUTED, true ) );
					return;
				}
				
				if( hasNetStream( ) ) 
				{
					setAudioLevel( 90 );
					_data.ns.receiveAudio( false );
				}
			}	
					
			public function isInitialized( ) : Boolean 
			{
				return m_initialized;
			}
			
			public function toggleAudio():void
			{
				trace( "toggelAudio" );
				//if( null == audioToggleButton ) 
				//{
				//	return;
				//}
				
				if(audioToggleButton.selected){
					if(_is_local){
						dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.AUDIO_MUTED,true))
					} else {
						if(_data.ns!=null){
							setAudioLevel(0,true);
							_data.ns.receiveAudio(false);
						}
					}
				} else {
					if(_is_local){
						dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.AUDIO_UNMUTED,true))
					} else {
						if(_data.ns!=null){
							setAudioLevel(audio_level.value);
							_data.ns.receiveAudio(true);
						}
					}
						
				}
			}
			
			private function initializeVideo( ) : void 
			{
				if( _is_local )
				{
					dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.VIDEO_UNMUTED,true));
					video.attachCamera(_camera);
					video.visible = true;
					return;
				} 
				
				if( hasNetStream( ) )
				{
					_data.ns.receiveVideo(true);
					video.visible = true;
				}
			}
			
			public function toggleVideo():void
			{
				trace("hit toggleVideo");
				
				//if( null == videoToggleButton ) 
				//{
				//	video.visible = true;
				//	return;
				//}
				
				//if using peer then we are unable to request a receiveAudio/Video false.. we'd just need to hide it
				if( videoToggleButton.selected ){
					if( _is_local ){
						dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.VIDEO_MUTED,true));
						video.attachCamera(null)
					} else {
						if(_data.ns!=null)
							_data.ns.receiveVideo(false);
					}
					video.visible = false;
				} else {
					if(_is_local){
						dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.VIDEO_UNMUTED,true));
						video.attachCamera(_camera);
					} else {
						if(_data.ns!=null)
							_data.ns.receiveVideo(true);
					}
					
					video.visible = true;
				}
			}
			
			/**
			 * Private functions
			 */
			
			private function adjustVolume():void
			{
				if(_data.ns != null)
					setAudioLevel(audio_level.value);
			}
			
			private function handleCreationComplete(event:Event):void
			{
				currentState="hideControls";
				trace( "handleCreationComplete" );
				m_initialized = true;
			}
			
			private function handleMouseOver(event:Event):void 
			{
				if( currentState == "usingControls" ) 
				{
					return;
				}

				currentState="showControls";	
			}
			
			private function handleMouseOut(event:Event):void
			{
				if( controlsContainer.contains( event.target as DisplayObject ) ) 
				{
					return;
				}
				
				currentState="hideControls";
			}
			
			private function handleMouseOverControls(event:Event):void 
			{
				currentState="usingControls"
			}
			
			private function handleMouseOutControls(event:Event):void
			{
				currentState="showControls";
			}
			
			private function setAudioLevel(levelIn:Number,force:Boolean=false):void
			{
				if( audioToggleButton.selected && !force ) { 
					return;
				}
				
				if(_is_local){
					dispatchEvent(new VideoPresenseEvent(VideoPresenseEvent.AUDIO_LEVEL,true,levelIn));
					return;
				}
				
				if( !hasNetStream( ) ) 
				{
					//not initialized
					return;  
				}
				
				var curr_transform:SoundTransform = _data.ns.soundTransform;
				curr_transform.volume = levelIn/100;
				_data.ns.soundTransform = curr_transform;
				
			}
			
			private function hasNetStream( ):Boolean
			{
				if( null == _data ) 
				{
					//not initialized
					return false;  
				}
				
				if( null == _data.ns ) 
				{
					//no camera attached to this video feed
					return false;
				}
				
				return true;
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="showControls" />
		<s:State name="usingControls" />
		<s:State name="hideControls" />
	</s:states>
	<s:BorderContainer
		id="borderContainer"
		backgroundColor="#ffffff" 
		borderColor="#cecece"
		width="162" 
		height="146"
		mouseOver="handleMouseOver(event);"
		mouseOut="handleMouseOut(event);">
		<s:Rect 
			id="background" 
			width="160" 
			height="120">
	        <s:fill>
	            <s:SolidColor color="#000000"/>
	        </s:fill>
	    </s:Rect>
		<mx:UIComponent 
			id="video_holder" 
			width="160" 
			height="120" />		
		<s:HGroup 
			id="controlsContainer"
			bottom="3"
			height="20"
			width="100%" 
			paddingTop="0"
			paddingBottom="0"
			gap="0"
			verticalAlign="middle"
			includeIn="showControls, usingControls, hideControls"
			mouseOver="handleMouseOverControls(event);"
			mouseOut="handleMouseOutControls(event);">
			<com.infrno.chat.view.components:ImageToggleButton
				styleName="videoToggleButton"
				id="videoToggleButton"
				click="toggleVideo( )"
				toolTip="toggle video"
				width="20"
				height="20"/>
			<mx:Spacer width="2" />
			<com.infrno.chat.view.components:ImageToggleButton
				styleName="audioToggleButton"
				id="audioToggleButton"
				click="toggleAudio()" 
				toolTip="toggle mute"
				width="20"
				height="20" />			
			<mx:Spacer width="2" />
			<s:HSlider
				id="audio_level" 
				showDataTip="false" 
				value="90" 
				maximum="100" 
				width="100%"
				change="adjustVolume( )"/>
		</s:HGroup>
	</s:BorderContainer>
	<mx:Spacer height="2" />
</s:Group>
