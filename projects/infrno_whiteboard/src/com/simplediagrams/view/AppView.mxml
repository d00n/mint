<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 		
		 xmlns:view="com.simplediagrams.view.*"
		 xmlns:swiz="org.swizframework.*" 
		 xmlns:register="com.simplediagrams.view.register.*"
		 xmlns:components="com.simplediagrams.view.components.*"
		 xmlns:startup="com.simplediagrams.view.startup.*"
		 currentState="{applicationModel.viewing}"
		 width="400" height="300" >
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.RegisterLicenseEvent;
			import com.simplediagrams.model.ApplicationModel;
			import com.simplediagrams.model.RegistrationManager;
			import com.simplediagrams.view.dialogs.CreateCustomLibraryDialog;
			import com.simplediagrams.view.dialogs.ImportDatabasePrompt;
			import com.simplediagrams.view.dialogs.ManageLibrariesDialog;
			
			[Bindable]
			[Inject]
			public var applicationModel:ApplicationModel
			
			[Inject]
			[Bindable]
			public var registrationManager:RegistrationManager
			
			
			
			[Mediate(event="RegisterLicenseEvent.LICENSE_VALIDATED")]
			public function onLicenseValidated(event:RegisterLicenseEvent):void
			{
				removeTrialBar()
			}
						
			[PostConstruct]
			public function onPostConstruct():void
			{
				if (registrationManager && registrationManager.isLicensed==true)
				{
					removeTrialBar()
				}	
				else
				{
					trialBar.height=150				
				}
			}
					
			protected function removeTrialBar():void
			{
				if (this.trialBar)
				{
					this.removeElement(trialBar)
				}
			}
			
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>	
		<components:PopupDisplay popup="{ManageLibrariesDialog}" display="{applicationModel.showManageLibraries}" modal="false"/>
		<components:PopupDisplay popup="{CreateCustomLibraryDialog}" display="{applicationModel.showCreateCustomLibrary}" modal="true"/>
		<components:PopupDisplay popup="{ImportDatabasePrompt}" display="{applicationModel.showImportDatabasePrompt}" modal="true"/>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<s:states>
		<!-- Define the new view states. -->
		<s:State name="default" />
		<s:State name="eulaView"/>
		<s:State name="registrationView"/>
		<s:State name="diagramView"/>
	</s:states>    
	
	<s:transitions>
		
		<s:Transition fromState="default" toState="registrationView">			
			<s:Fade targets="{[registration, startup]}"/>
		</s:Transition>
		
		<s:Transition fromState="registrationView" toState="default">			
			<s:Fade targets="{[startup, registration]}"/>
		</s:Transition>
				
		<s:Transition fromState="eulaView" toState="registrationView" >
			<s:Fade targets="{[eula, registration]}"/>
		</s:Transition>
		
		<s:Transition fromState="eulaView" toState="default" >
			<s:Fade targets="{[eula, startup]}"/>
		</s:Transition>		
		
		
	</s:transitions>
	
	
	<s:Group width="100%" height="100%" id="viewHolder">
		
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<!-- background fill -->  
		<s:Rect id="background" left="0" top="0" right="0" bottom="0" alpha="1">  
			<s:fill>  
				<s:BitmapFill source="@Embed(source='assets/img/backgrounds/chalkboard_tile.png')"/>  
			</s:fill>  
		</s:Rect>  
		
		
		<view:DiagramView id="diagram" 
						  width="100%" 
						  height="100%" 
						  includeIn="diagramView" 
						  itemDestructionPolicy="never"		    
						  />	
		
		<startup:StartupMenuView id="startup" 
							  includeIn="default"	
							  horizontalCenter="0"
							  verticalCenter="0"
							  />			 
		
		
		<view:RegistrationView id="registration"
							   includeIn="registrationView"		
							   horizontalCenter="0"
							   verticalCenter="0"
							   />		
		
		<view:EULAView id="eula"
					   includeIn="eulaView"		
					   	horizontalCenter="0"
						verticalCenter="0"
						/>
		
		
	</s:Group>

	
</s:Group>
