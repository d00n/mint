<?xml version="1.0" encoding="utf-8"?>
<s:Group implements="mx.managers.IFocusManagerComponent" xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:view="com.simplediagrams.view.*"
	creationComplete="onCC()" xmlns:drawingBoard="com.simplediagrams.view.drawingBoard.*" xmlns:library="com.simplediagrams.view.library.*"  >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script> 
	
		<![CDATA[
			import com.simplediagrams.events.DeleteSDObjectModelEvent;
			import com.simplediagrams.events.DrawingBoardItemDroppedEvent;
			import com.simplediagrams.events.ExportDiagramEvent;
			import com.simplediagrams.events.ExportDiagramUserRequestEvent;
			import com.simplediagrams.events.SaveDiagramEvent;
			import com.simplediagrams.events.SelectionEvent;
			import com.simplediagrams.events.UndoRedoEvent;
			import com.simplediagrams.model.ApplicationModel;
			import com.simplediagrams.model.DiagramManager;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.util.Logger;
			
			import flash.events.Event;
			import flash.events.KeyboardEvent;
			
			import mx.core.FlexGlobals;
			import mx.core.UITextField;
			
			import spark.components.RichEditableText;
		    
			[Bindable]
			[Inject]
			public var model:ApplicationModel;    
			
			[Bindable]
			[Inject]
			public var diagramManager:DiagramManager;  	
			
			/* This page catches all keyboard events not handled by menu controller. Later these should be moved to a special manager */			
			public function onCC():void
			{
				FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				this.setFocus();
			}
			
			
			/*Pass a reference to the view to the controller and let it take care of exporting */
			[Mediate(event='ExportDiagramUserRequestEvent.EXPORT_DIAGRAM')]
			public function onExportDiagramRequest(event:ExportDiagramUserRequestEvent):void
			{						
				event.stopImmediatePropagation()
										
				switch(event.destination)
				{
					case ExportDiagramUserRequestEvent.DESTINATION_BASECAMP:							
						var evt:ExportDiagramEvent = new ExportDiagramEvent(ExportDiagramEvent.EXPORT_TO_BASECAMP, true)
						break
					
					case ExportDiagramUserRequestEvent.DESTINATION_YAMMER:							
						evt = new ExportDiagramEvent(ExportDiagramEvent.EXPORT_TO_YAMMER, true)
						break
					
					case ExportDiagramUserRequestEvent.DESTINATION_FILE:							
						evt = new ExportDiagramEvent(ExportDiagramEvent.CREATE_IMAGE_FOR_EXPORT, true)		
						break
					
					case ExportDiagramUserRequestEvent.DESTINATION_CLIPBOARD:							
						evt = new ExportDiagramEvent(ExportDiagramEvent.EXPORT_TO_CLIPBOARD, true)					
						break
					
					default:
						
						Logger.debug("Unrecognized destination: " + event.destination, this)
						return
				}
				
				evt.format = ExportDiagramEvent.FORMAT_PNG //for now we're hard-coding to PNG
				evt.view = this.drawingBoard.contentGroup					
				dispatchEvent(evt)
				
			}
							
    		
			/* Handle key combinations not covered via the native menu (native menu handles save, close, copy, cut, paste, select all, undo, redo) */			
    		public function onKeyDown(event:KeyboardEvent):void
            {   			
            	if (event.target is UITextField) return //user is typing in a text component
           		if (event.target is RichEditableText) return //user is typing in a text area
           							
				switch(event.keyCode)
				{
					case Keyboard.DELETE:
					case Keyboard.BACKSPACE:
						
						var deleteEvent:DeleteSDObjectModelEvent = new DeleteSDObjectModelEvent(DeleteSDObjectModelEvent.DELETE_SELECTED_FROM_MODEL, true)
						dispatchEvent(deleteEvent)
//						FlexGlobals.topLevelApplication.appView.setFocus()
						break					
				}
			}  
			
			[Mediate(event='ShapesPanelEvent.TOGGLE_DISPLAY')]
			public function onShapesPanelToggle(): void
			{
				if (shapesPanel.width > 0){
					shapesPanel.width = 0;
				}
				else{
					shapesPanel.width = 170;
				}
			}  
			
			[Mediate(event='TextChatEvent.TEXT_CHAT_EVENT')]
			public function onTextChatToggle(): void
			{
				chatView.visible = !chatView.visible;
			} 			
//			[Mediate(event='DrawingBoardItemDroppedEvent.CHAT_VIEW_MOVED')]
//			public function moveChatView(event:DrawingBoardItemDroppedEvent):void 
//			{
//				chatView.x = event.dropX - chatView.xOff;
//				chatView.y = event.dropY - chatView.yOff;
//			}
    			
		]]>

	</fx:Script>
	
	

						
	<mx:HDividedBox styleName="libraryDivider" height="100%" width="100%"  >

			<drawingBoard:DrawingBoard id="drawingBoard" height="100%" width="100%" />
			<library:ShapesPanel id="shapesPanel" height="100%" width="0" />
			<!--view:ShapesPanel id="shapesPanel" height="100%" width="250" /-->	

	</mx:HDividedBox>
	
	
	<view:ToolPanel id="toolPanel" x="2" y="2" />
	<view:ChatView id="chatView" x="0" bottom="15" />
	
	<view:PercentView id="percentView" x="{drawingBoard.width/2 - 45}" top="10"/>
	

</s:Group>
