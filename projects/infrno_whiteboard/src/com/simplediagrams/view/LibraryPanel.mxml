<?xml version="1.0" encoding="utf-8"?>
<mx:Accordion xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	addedToStage="onATS()"
	horizontalScrollPolicy="off" 
	paddingLeft="0" 
	paddingRight="0"
	creationPolicy="all"
    borderStyle="none"
    borderColor="#000000"
	headerStyleName="customAccordionHeadStyles"
	>
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.CreateCustomLibraryEvent;
			import com.simplediagrams.model.ApplicationModel;
			import com.simplediagrams.model.DiagramStyleManager;
			import com.simplediagrams.model.LibraryManager;
			import com.simplediagrams.model.RegistrationManager;
			import com.simplediagrams.model.SDObjectModel;
			import com.simplediagrams.model.SDSymbolModel;
			import com.simplediagrams.model.libraries.CustomLibrary;
			import com.simplediagrams.model.libraries.ILibrary;
			import com.simplediagrams.util.Logger;
			import com.simplediagrams.view.components.BasicLibraryCanvas;
			import com.simplediagrams.view.components.CustomLibraryCanvas;
			import com.simplediagrams.view.itemRenderers.LibraryItemRenderer;
			
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.filters.ColorMatrixFilter;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Image;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.List;
			import spark.layouts.TileLayout;
			
			[Inject]
			[Bindable]
			public var applicationModel:ApplicationModel;
			
			[Inject]
			[Bindable]
			public var registrationManager:RegistrationManager;
			
			[Inject]
			[Bindable]
			public var libraryManager:LibraryManager;
			
			[Inject]
			[Bindable]
			public var diagramStyleManager:DiagramStyleManager;
			
			[Bindable]
			private var _libraryItemsAC:ArrayCollection 
			
			[Mediate(event="CreateCustomLibraryEvent.CUSTOM_LIBRARY_CREATED")]
			public function onCustomLibraryAdded(event:CreateCustomLibraryEvent):void
			{
				//make sure to open the custom library dialog so user can start adding symbols
				this.selectedIndex = libraryManager.librariesAC.length-1
				
			}
			
			[Mediate(event="LibraryEvent.LIBRARIES_UPDATED")]
			public function updatePanel(event:Event):void
			{
				createLibraryPanel()
			}
			
			
			protected function onATS():void
			{
				Logger.debug("onATS()", this)
				if (this.numChildren==0 || libraryManager.panelNeedsUpdating )
				{
					createLibraryPanel()
					libraryManager.panelNeedsUpdating = false //I use this flag because if this state isn't active when a PANEL_UPDATED event is launched, we won't get a panel update
				}
			}
			
			
			protected function createLibraryPanel():void
			{
				if (libraryManager==null) return
					
				this.removeAllChildren()
				var len:uint = libraryManager.librariesAC.length
				for (var i:uint=0;i<len;i++)
				{
					var library:ILibrary = libraryManager.librariesAC.getItemAt(i) as ILibrary
					if (!library.showInPanel) continue
					if (library.isPremium && registrationManager.isLicensed==false) continue						
						
					if (library.isCustom)
					{
						var canvas:BasicLibraryCanvas = new CustomLibraryCanvas()
						CustomLibraryCanvas(canvas).libraryID = CustomLibrary(library).id
						if (library.sdLibraryObjectsAC.length>0)
						{
							CustomLibraryCanvas(canvas).showDropHereMsg = false
						}
					}
					else
					{						
						canvas = new BasicLibraryCanvas()
					}
					canvas.percentWidth = 100
					canvas.percentHeight = 100
					canvas.label = library.displayName
					canvas.setStyle("backgroundAlpha", 0)
										
					var list:List = new List()					
					list.id = "lstTileList"
					list.styleName = "libraryTileList"
					list.dataProvider = library.sdLibraryObjectsAC
					list.itemRenderer = new ClassFactory(LibraryItemRenderer)
					list.dragEnabled = true
					list.dropEnabled = false
					list.dragMoveEnabled = false
					list.addEventListener(DragEvent.DRAG_START, onDragStart)
					list.percentHeight = 100
					list.percentWidth = 100
					list.setStyle("rollOverColor","0x000000")
					list.setStyle("selectionColor","0x000000")
					
					var tl:TileLayout = new TileLayout()
					tl.horizontalGap = 7
					tl.verticalGap = 7
					tl.columnWidth = 50
					tl.rowHeight = 50
					
					list.layout = tl
					
					BasicLibraryCanvas(canvas).addLibraryList(list)
					this.addChild(canvas)
					
				}
				
				this.invalidateDisplayList()
			}
			
			
			private function onDragStart(event:MouseEvent):void
			{
												
                var dragInitiator:List = event.currentTarget as List;
                var dragSource:DragSource = new DragSource();
               				
                dragSource.addData(dragInitiator.selectedItem, 'libraryItem');
                               
				var dragProxy:Image = new Image()
				var sdObjectModel:SDObjectModel = SDObjectModel(event.currentTarget.selectedItem)
				
				//color drag image to fit style setting
				var defaultColorMatrix:Array = diagramStyleManager.defaultColorMatrix
				
				if (sdObjectModel.colorizable)
				{
					var filter:ColorMatrixFilter = new ColorMatrixFilter(defaultColorMatrix)
					dragProxy.filters = [filter]				
				}
				
				if (sdObjectModel is SDSymbolModel && SDSymbolModel(sdObjectModel).imageData)
				{					
					dragProxy.source = SDSymbolModel(sdObjectModel).imageData			
				}
				else
				{			
					var iconClass:Class = sdObjectModel.iconClass					
					dragProxy.source = new iconClass()			
				}	
					
				var xPos:Number = event.target.parent.mouseX
				var yPos:Number = event.target.parent.mouseY
			
				try
				{	
                	DragManager.doDrag(dragInitiator, dragSource, event, dragProxy, xPos, yPos)
				}
				catch(err:Error)
				{
					//TODO : figure out why sometimes I get a "TypeError: Error #2007: Parameter data must be non-null." when dragging here 
					Logger.error("drag error: " + err, this)
				}
			}
			
			private function noSelectionEasingFunction(t:Number,b:Number,c:Number,d:Number):Number
			{
			     return 0;
			}

			
		]]>
	</fx:Script>
	

	

</mx:Accordion>
