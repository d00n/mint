<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:components="com.simplediagrams.view.components.*" 
	mouseDown="onMouseDown(event)"
	mouseUp="onMouseUp(event)"
	creationComplete="onCC()"

	width="24" >
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.ChangeDepthEvent;
			import com.simplediagrams.events.ColorEvent;
			import com.simplediagrams.events.DeleteSDObjectModelEvent;
			import com.simplediagrams.events.LoadImageEvent;
			import com.simplediagrams.events.ShapesPanelEvent;
			import com.simplediagrams.events.StyleEvent;
			import com.simplediagrams.events.ToolPanelEvent;
			import com.simplediagrams.events.UndoRedoEvent;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.model.ToolsManager;
			import com.simplediagrams.model.tools.Tools;
			import com.simplediagrams.util.Logger;
			
			import flash.events.MouseEvent;				
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
						
			[Inject]
			[Bindable]
			public var toolsManager:ToolsManager;
									
			[Bindable]
			protected var _backgroundColor:Number = 0xFFFFFF;
	
			[Bindable]		
			[Embed(source='assets/img/icons/pencil.png')]
			private var pencilIcon:Class
						
			[Bindable]		
			[Embed(source='assets/img/icons/arrow.png')]
			private var arrowIcon:Class
			
			[Bindable]		
			[Embed(source='assets/img/icons/picture_add.png')]
			private var addPictureIcon:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/add_shape_drawer.png')]
			private var addShapeDrawerIcon:Class
			
			[Bindable]		
			[Embed(source='assets/img/icons/T_icon.png')]
			private var textIcon:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/line_icon.png')]
			private var lineIcon:Class
			
			
			[Bindable]
			[Embed(source='assets/img/icons/plus_sign.png')]
			private var zoomIn:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/minus_sign.png')]
			private var zoomOut:Class
			
			
			[Bindable]
			[Embed(source='assets/img/icons/move_backward.png')]
			private var moveBackward:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/delete_icon.png')]
			private var deleteSelected:Class			
			
			[Bindable]
			[Embed(source='assets/img/icons/move_forward.png')]
			private var moveForward:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/arrow_rotate_left.png')]
			private var undoIcon:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/arrow_rotate_right.png')]
			private var redoIcon:Class
			
			[Bindable]
			[Embed(source='assets/img/icons/zoom.png')]
			private var magnifier:Class
			
			
			protected function onCC():void
			{
				cp.selectedColor = 0xFFFFFF
				backgroundColor.color = 0xFFFFFF
			}
			
			
			protected function onMouseDown(event:MouseEvent):void
			{
				this.startDrag()
				event.stopPropagation()
			}
			
			protected function onMouseUp(event:MouseEvent):void
			{
				this.stopDrag()
				event.stopPropagation()
			}
			
			protected function onPencilTool():void
			{
				var evt:ToolPanelEvent = new ToolPanelEvent(ToolPanelEvent.TOOL_SELECTED, true)
				evt.toolTypeSelected = Tools.PENCIL_TOOL;
				dispatchEvent(evt)
			}
			
			protected function onUndoIcon():void
			{
				var undoEvent:UndoRedoEvent = new UndoRedoEvent(UndoRedoEvent.UNDO, true)		
				dispatcher.dispatchEvent(undoEvent)
			}
			
			protected function onRedoIcon():void
			{
				var redoEvent:UndoRedoEvent = new UndoRedoEvent(UndoRedoEvent.REDO, true)		
				dispatcher.dispatchEvent(redoEvent)
			}
			
			protected function onAddPictureIcon():void
			{
				var evt:LoadImageEvent = new LoadImageEvent(LoadImageEvent.ADD_IMAGE_FROM_MENU, true)
				dispatchEvent(evt)
			}
			
			
			protected function onPointerTool():void	
			{					
				var evt:ToolPanelEvent = new ToolPanelEvent(ToolPanelEvent.TOOL_SELECTED, true)
				evt.toolTypeSelected = Tools.POINTER_TOOL;
				dispatchEvent(evt)					
			}
			
			
			protected function onLineTool():void
			{				
				var evt:ToolPanelEvent = new ToolPanelEvent(ToolPanelEvent.TOOL_SELECTED, true)
				evt.toolTypeSelected = Tools.LINE_TOOL;
				dispatchEvent(evt)
			}
						
			protected function onTextTool():void
			{	
				var evt:ToolPanelEvent = new ToolPanelEvent(ToolPanelEvent.TOOL_SELECTED, true)
				evt.toolTypeSelected = Tools.TEXT_TOOL;
				dispatchEvent(evt)				
			}

			protected function onZoomTool():void
			{								
				var evt:ToolPanelEvent = new ToolPanelEvent(ToolPanelEvent.TOOL_SELECTED, true)
				evt.toolTypeSelected = Tools.ZOOM_TOOL;
				dispatchEvent(evt)
			}			
			
			
			protected function onColorChange():void
			{
				var evt:ColorEvent = new ColorEvent(ColorEvent.CHANGE_COLOR, true)
				evt.color = cp.selectedColor
				dispatcher.dispatchEvent(evt)
			}
			
			protected function onDeleteSelected():void
			{
				var deleteEvent:DeleteSDObjectModelEvent = new DeleteSDObjectModelEvent(DeleteSDObjectModelEvent.DELETE_SELECTED_FROM_MODEL, true);
				dispatchEvent(deleteEvent);
			}
			
			protected function onMoveForward():void
			{
				var eventChangeDepth:ChangeDepthEvent = new ChangeDepthEvent(ChangeDepthEvent.MOVE_TO_FRONT, true);
				dispatchEvent(eventChangeDepth);			
			}
			
			protected function onMoveBackward():void
			{
			  var eventChangeDepth:ChangeDepthEvent = new ChangeDepthEvent(ChangeDepthEvent.MOVE_TO_BACK, true);
				dispatchEvent(eventChangeDepth);				
			}
			
			protected function onToggleShapeDrawer():void
			{
				dispatcher.dispatchEvent(new ShapesPanelEvent(ShapesPanelEvent.TOGGLE_DISPLAY, true))				
			}
			
		]]>
	</fx:Script>
	
	
	

	<s:Rect radiusX="5" radiusY="5" width="24" height="100%">
		<s:fill>
			<s:SolidColor id="backgroundColor" alpha=".3" color="{_backgroundColor}"/>
		</s:fill>
	</s:Rect>
		
	<s:VGroup width="24" height="100%" horizontalAlign="center" paddingTop="2" paddingBottom="2" gap="2">
		

		<mx:Button icon="{arrowIcon}" click="onPointerTool()" width="20" height="20"  toolTip="Pointer tool (CTRL-P)"/>
		
		<mx:Button icon="{pencilIcon}" click="onPencilTool()" width="20" height="20" toolTip="Pencil tool (CTRL-N)" />
	
		<mx:Button icon="{lineIcon}" click="onLineTool()" width="20" height="20" toolTip="Line tool (CTRL-L)"/>		
								
		<mx:Button icon="{textIcon}" click="onTextTool()" width="20" height="20" toolTip="Text tool (CTRL-T)"/>	
		
		<mx:Button icon="{addPictureIcon}" click="onAddPictureIcon()" width="20" height="20" toolTip="Add picture"/>
		
		<mx:Button icon="{addShapeDrawerIcon}" click="onToggleShapeDrawer()" width="20" height="20" toolTip="Open/close shape drawer"/>
		
		
		<!--
		<mx:Button icon="{undoIcon}" click="onUndoIcon()" width="20" height="20" toolTip="Undo"/>
		
		<mx:Button icon="{redoIcon}" click="onRedoIcon()" width="20" height="20" toolTip="Redo"/>
		
		<mx:Button icon="{magnifier}" click="onZoomTool()" width="20" height="20" toolTip="Zoom In/Out (CTRL + and CTRL -)""/>			
		-->
		
		<mx:Button icon="{deleteSelected}" click="onDeleteSelected()" width="20" height="20" toolTip="Delete"/>	
		
		<mx:Button icon="{moveForward}" click="onMoveForward()" width="20" height="20" toolTip="Move selected object forward"/>	
		
		<mx:Button icon="{moveBackward}" click="onMoveBackward()" width="20" height="20" toolTip="Move selected object backward"/>	

		<mx:ColorPicker id="cp" width="20" height="20"  close="onColorChange()" doubleClickEnabled="true" doubleClick="onColorChange()" color="0xFFFFFF" toolTip="Color picker"/>
		
		<components:GridButtonPopUp id="gridButtonPopUp" skinClass="com.simplediagrams.view.skins.GridButtonPopUpSkin" />		

		<components:AlignButtonPopUp 
					id="alignButtonPopUp"
					skinClass="com.simplediagrams.view.skins.AlignButtonPopUpSkin"
					/>

	</s:VGroup>
		
	
		
</s:Group>
