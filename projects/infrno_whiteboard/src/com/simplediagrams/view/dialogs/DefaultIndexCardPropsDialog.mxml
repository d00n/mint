<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:view="com.simplediagrams.view.*" 
	xmlns:dialogs="com.mcquilleninteractive.comfen.view.dialogs.*" 
	contentBackgroundColor="0xFFFFFF"
	keyDown="onKeyDown(event)"
	title="Default Index Card Properties"	
	
	creationComplete="onCC()"
	>
	
	<fx:Metadata>
		[Event(name="OK", type="flash.events.Event")]
		[Event(name='cancel', event='flash.events.Event')]
	</fx:Metadata>
	
	<s:states>
		<s:State name="default"/>
		<s:State name="error"/>
	</s:states>
	
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.DiagramEvent;
			import com.simplediagrams.model.CopyUtil;
			import com.simplediagrams.model.DiagramManager;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.model.SDBackgroundModel;
			import com.simplediagrams.model.SettingsModel;
			import com.simplediagrams.util.Logger;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.PropertyChangeEvent;
			import mx.events.PropertyChangeEventKind;
			import mx.events.ValidationResultEvent;
			import mx.graphics.BitmapFillMode;
			import mx.validators.Validator;
			
			[Bindable]
			[Inject]
			public var settingsModel:SettingsModel
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher
			
			protected var _validatorsArr:Array 
			
			[PostConstruct]
			public function onPostConstruct():void
			{
				if (this.colorPicker)
				{
					setProps()
				}
			}
			
			protected function onCC():void
			{
				_validatorsArr = [vldHeight, vldWidth]
				this.closeButton.visible = false
				if (settingsModel)
				{
					setProps()				
				}
			}
			
			protected function setProps():void
			{
				colorPicker.selectedColor = settingsModel.defaultIndexCardBGColor
				txtHeight.text = settingsModel.defaultIndexCardHeight.toString()
				txtWidth.text  = settingsModel.defaultIndexCardWidth.toString()
				cbxShowTape.selected = settingsModel.defaultIndexCardShowTape
			}
			
			protected function onOK():void
			{
				var valid:Boolean = validate()
				
				if (valid==false) 
				{
					this.currentState = "error"
					return
				}
				else
				{		
					settingsModel.defaultIndexCardHeight = Number(this.txtHeight.text)
					settingsModel.defaultIndexCardWidth = Number(this.txtWidth.text)
					settingsModel.defaultIndexCardBGColor = colorPicker.selectedColor						
					settingsModel.defaultIndexCardShowTape = cbxShowTape.selected 
					var evt:Event = new Event("OK", true)
					dispatchEvent(evt)
				}
				
			}
			
			protected function validate():Boolean
			{
				Logger.debug("validatorsArr: " + _validatorsArr + " validatorsArr[0]: " +_validatorsArr[0], this)
				
				for each (var vld:Validator in _validatorsArr)
				{
					var vResult:ValidationResultEvent = vld.validate()
					
					if (vResult.type!=ValidationResultEvent.VALID) 
					{
						return false
					}
				}
				
				return true
			}
			
			protected function onCancel():void
			{			
				var evt:Event = new Event(Event.CANCEL, true)
				dispatchEvent(evt)				
			}
			
			
			protected function onKeyDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					onOK()
				}
			}
			
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>		
		<mx:NumberValidator id="vldHeight" 
							minValue="50"
							maxValue="1000"
							source="{txtHeight}"
							property="text"
							trigger="{txtHeight}"
							triggerEvent="focusOut"
							lowerThanMinError="Height must be at least 50 pixels"
							exceedsMaxError="Height cannot be greater than 1000 pixels"
							/>
		
		<mx:NumberValidator id="vldWidth" 
							minValue="50"
							maxValue="1000"
							source="{txtWidth}"
							property="text"
							trigger="{txtWidth}"
							triggerEvent="focusOut"
							lowerThanMinError="Width must be at least 50 pixels"
							exceedsMaxError="Width cannot be greater than 1000 pixels"
							/>
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
	</s:layout>
	
	
	<s:HGroup includeIn="error" id="errorMessage" paddingTop="5" paddingBottom="5">
		
		<mx:Text showEffect="showEff"
				 height="40" width="320" 
				 color="#CC0000"
				 text="Some of your inputs are not valid."/>
	</s:HGroup>
	
	
	
	<s:Label text="Size" fontWeight="bold" paddingTop="5" />
	
	<s:HGroup  paddingTop="5" paddingBottom="5">
		
		<mx:Label paddingLeft="5" text="Width:" width="80"/>
		<s:TextInput id="txtWidth" 
					 text="{settingsModel.defaultIndexCardWidth}"  
					 restrict="0-9" 
					 maxChars="4"
					 width="80"
					 />
	</s:HGroup>
	
	<s:HGroup paddingTop="5" paddingBottom="5">		
		<mx:Label paddingLeft="5" text="Height:" width="80"/>
		<s:TextInput id="txtHeight" 
					 text="{settingsModel.defaultIndexCardHeight}" 
					 restrict="0-9" 
					 maxChars="4"
					 width="80"
					 />
	</s:HGroup>
	
	<s:Label text="Background" fontWeight="bold" paddingTop="5" />
	
	<s:HGroup paddingTop="10" paddingBottom="5" height="100%" >	
		<s:Label width="80" paddingLeft="5" text="Color:"/>
		<mx:ColorPicker id="colorPicker" />
	</s:HGroup>
	
	
	<s:Label text="Extras" fontWeight="bold" paddingTop="5" />
	
	<s:HGroup paddingTop="10" paddingBottom="5" height="100%" >	
		<s:Label width="80" paddingLeft="5" text="Show tape:" />
		<s:CheckBox id="cbxShowTape"  />
	</s:HGroup>
	
		
	<s:VGroup width="100%" horizontalAlign="right" paddingTop="10">
		<s:HGroup>
			<s:Button id="btnCancel" label="CANCEL" click="onCancel()"  styleName="blueButton" width="90" height="30" />	
			<s:Button id="btnOK" label="OK" click="onOK()" styleName="blueButton" width="90" height="30"  />	
		</s:HGroup>
	</s:VGroup>
	
		
	
</s:TitleWindow>
