<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:view="com.simplediagrams.view.*" 
	xmlns:dialogs="com.mcquilleninteractive.comfen.view.dialogs.*" 
    contentBackgroundColor="0xFFFFFF"
    keyDown="onKeyDown(event)"
    title="Edit Diagram Properties"
    width="350"
 
    creationComplete="onCC()"
    >
	
	<fx:Metadata>
		[Event(name="OK", type="flash.events.Event")]
		[Event(name='cancel', event='flash.events.Event')]
	</fx:Metadata>
		
	<s:states>
		<s:State name="normal"/>
		<s:State name="error"/>
	</s:states>
	
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.util.Logger;
			
			import mx.collections.ArrayCollection;
			import mx.events.PropertyChangeEvent;
			import mx.events.PropertyChangeEventKind;
			import mx.events.ValidationResultEvent;
			import mx.graphics.BitmapFillMode;
			import mx.validators.Validator;
			
			
			[Bindable]
			[Autowire]
			public var diagramModel:DiagramModel
			
			[Bindable]
			protected var _selectedBGFormat:uint
			
			
			protected var _validatorsArr:Array 
			
			public var bgFormatsAC:ArrayCollection = new ArrayCollection(	[{label:"Clip", data:BitmapFillMode.CLIP},
																			{label:"Repeat", data:BitmapFillMode.REPEAT},
																			{label:"Scale", data:BitmapFillMode.SCALE}]);
			
			[PostConstruct]
			public function onPostConstruct():void
			{
				for (var i:uint=0;i<bgFormatsAC.length;i++)
				{
					if (bgFormatsAC.getItemAt(i).data == diagramModel.currSDBackgroundModel.fillMode)
					{
						_selectedBGFormat = i
					}
				}
			}
				
			protected function onCC():void
			{
				this.closeButton.visible=false
				_validatorsArr = [vldHeight, vldWidth]
			}
			
			protected function onOK():void
			{
				var valid:Boolean = validate()
				
				if (valid==false) 
				{
					this.currentState = "error"
				}
				else
				{					
					diagramModel.width = Number(txtWidth.text)
					diagramModel.height = Number(txtHeight.text)
					diagramModel.isDirty = true
					var oldBGValue:String = diagramModel.currSDBackgroundModel.fillMode
						
					diagramModel.currSDBackgroundModel.fillMode = lstBGFormat.selectedItem.data
					diagramModel.currSDBackgroundModel.tintAlpha = hslAlpha.value
					diagramModel.currSDBackgroundModel.tintColor = cpBackgroundColor.selectedColor
						
					
					diagramModel.dispatchEvent(new PropertyChangeEvent(PropertyChangeEvent.PROPERTY_CHANGE, 
												false, false, PropertyChangeEventKind.UPDATE, 
												'currSDBackgroundModel', null, null, diagramModel));
						
					var evt:Event = new Event("OK", true)
					dispatchEvent(evt)
				}
				
			}
			
			protected function validate():Boolean
			{
				Logger.debug("validatorsArr: " + _validatorsArr + " validatorsArr[0]: " +_validatorsArr[0], this)
				
				for each (var vld:Validator in _validatorsArr)
				{
					var vResult:ValidationResultEvent = vld.validate()
					
	                if (vResult.type!=ValidationResultEvent.VALID) 
	                {
	                   return false
	                }
				}
				
				return true
			}
			
			protected function onCancel():void
			{			
				var evt:Event = new Event(Event.CANCEL, true)
				dispatchEvent(evt)				
			}
			
			
			protected function onKeyDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					onOK()
				}
			}
			
			protected function formatAlphaSlider(value:Number):String
			{
				return uint(value*100).toString() + "%"
			}
		

			
		]]>
	</fx:Script>
	
	<fx:Declarations>		
		<mx:NumberValidator id="vldHeight" 
			minValue="50"
			source="{txtHeight}"
            property="text"
            trigger="{txtHeight}"
            triggerEvent="focusOut"
			/>
			
		<mx:NumberValidator id="vldWidth" 
			minValue="50"
			source="{txtWidth}"
            property="text"
            trigger="{txtWidth}"
            triggerEvent="focusOut"
			/>
		
    </fx:Declarations>


	<s:layout>
		<s:VerticalLayout  paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
	</s:layout>
	
		
	<s:HGroup includeIn="error" id="errorMessage" paddingTop="5" paddingBottom="5">
	
		<mx:Text showEffect="showEff"
				height="40" width="320" 
				color="#CC0000"
				text="Some of your inputs are not valid. Please check the fields with a red border."/>
	</s:HGroup>
			
	
	
	<s:Label text="Size" fontWeight="bold" paddingTop="5" />
	
	<s:HGroup  paddingTop="5" paddingBottom="5">
		
		<mx:Label paddingLeft="5" text="Width:" width="80"/>
		<s:TextInput id="txtWidth" text="{diagramModel.width}"  
			restrict="0-9" maxChars="4"
			width="80"
			/>
	</s:HGroup>
	
	<s:HGroup paddingTop="5" paddingBottom="5">		
		<mx:Label paddingLeft="5" text="Height:" width="80"/>
		<s:TextInput id="txtHeight" text="{diagramModel.height}" 
					 restrict="0-9" maxChars="4"
					 width="80"
					 />
	</s:HGroup>
	
	<s:Label text="Background" fontWeight="bold" paddingTop="5" />
	
	<s:HGroup paddingTop="10" paddingBottom="5" >	
		<s:Label width="80" paddingLeft="5" text="Format:" />
		<s:DropDownList id="lstBGFormat" dataProvider="{bgFormatsAC}" selectedIndex="{_selectedBGFormat}" />
	</s:HGroup>
	
		
	<s:HGroup  paddingBottom="5" verticalAlign="middle"  >	
		<s:Label width="80" paddingLeft="5" text="Tint Color:" />
		<mx:ColorPicker id="cpBackgroundColor" selectedColor="{diagramModel.currSDBackgroundModel.tintColor}" height="25" width="25"  />		
	</s:HGroup>
	
	<s:HGroup   paddingBottom="5" verticalAlign="middle"  >	
		<s:Label width="80" paddingLeft="5" text="Tint Amount:" />
				
		<s:Group>
			<mx:Image source="@Embed('assets/img/grid_block.png')"/>
			<s:Rect id="backgroundRect" width="25" height="25"   >
				<s:fill>
					<s:SolidColor alpha="{hslAlpha.value}" color="{cpBackgroundColor.selectedColor}"/>
				</s:fill>
			</s:Rect>
		</s:Group>
					
		<s:Label text="{(uint(hslAlpha.value*100)).toString() + '%'}" width="40"/>
		
		<s:HSlider id="hslAlpha" minimum="0" maximum="1"				   
				   dataTipFormatFunction="formatAlphaSlider"
				   snapInterval=".01"
				   value="{diagramModel.currSDBackgroundModel.tintAlpha}"
				   />		
	</s:HGroup>
	
	
	
	
	
	
	<s:VGroup width="100%" horizontalAlign="right">
		<s:HGroup>
			<s:Button id="btnCancel" label="CANCEL" click="onCancel()"  styleName="blueButton" width="90" height="30" />	
			<s:Button id="btnOK" label="OK" click="onOK()" styleName="blueButton" width="90" height="30"  />	
		</s:HGroup>
	</s:VGroup>
	

	
	
</s:TitleWindow>
