<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas contextMenu="onContextMenu(event)"  label="{library.displayName}" 
		   xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:components="com.simplediagrams.view.components.*">
	<fx:Binding source="library.custom" destination="contextMenuEnabled"/>
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.LibraryEvent;
			import com.simplediagrams.events.LibraryItemEvent;
			import com.simplediagrams.model.libraries.Library;
			import com.simplediagrams.model.libraries.LibraryItem;
			import com.simplediagrams.view.dialogs.DeleteCustomSymbolDialog;
			import com.simplediagrams.view.dialogs.RenameCustomLibraryItemDialog;
			
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.components.supportClasses.ItemRenderer;
			[Bindable]
			public var library:Library;
			
			[Embed(source='assets/img/InfrnoBug_50x50.png')]
			public var dragImage:Class;
			
			private function isAddItemVisible(custom:Boolean, length:Number):Boolean
			{
				return custom && length == 0;
			}
			
			
			private function onDragStart(event:MouseEvent):void
			{						
				var dragInitiator:List = event.currentTarget as List;
				var dragSource:DragSource = new DragSource();
				
				dragSource.addData(dragInitiator.selectedItem, 'libraryItem');
				
//				var dragProxy:IFlexDisplayObject; 
//				var dragItemRenderer:IFlexDisplayObject = IFlexDisplayObject(dragInitiator.dataGroup.getElementAt(dragInitiator.selectedIndex));
				var xOffset:Number=mouseX ;
				var yOffset:Number=mouseY;
				
				var imageProxy:Image = new Image();
				imageProxy.source = dragImage;
				imageProxy.height = 50;
				imageProxy.width = 50;
				
				DragManager.doDrag(this, dragSource, event, imageProxy, -xOffset, -yOffset, .1 );
//				DragManager.doDrag(this, dragSource, event, dragItemRenderer, xOffset, yOffset);
			}
			
			protected var renameMenuItem:ContextMenuItem;
			protected var deleteMenuItem:ContextMenuItem;
			protected var importMenuItem:ContextMenuItem;
			protected var libraryMenu:ContextMenu;
			protected var rightClickedItem:Object;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				libraryMenu = new ContextMenu();	
				
				importMenuItem = new ContextMenuItem("Add image to library");
				importMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onImportItemMenu);
				libraryMenu.customItems.push(importMenuItem);
				
				
				renameMenuItem = new ContextMenuItem("Rename symbol");
				libraryMenu.customItems.push(renameMenuItem);
				renameMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onRenameMenuItem);
				
				deleteMenuItem = new ContextMenuItem("Delete symbol from library", false);
				deleteMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteItemMenu);	
				libraryMenu.customItems.push(deleteMenuItem);
								
				if(_contextMenuEnabled)
					contextMenu = libraryMenu;
				else
					contextMenu = null;
			}
			
			private function onImportItemMenu(event:Event):void
			{
				var libraryEvent:LibraryItemEvent = new LibraryItemEvent(LibraryItemEvent.IMPORT_LIBRARY_ITEM);
				libraryEvent.library = library;
				dispatchEvent(libraryEvent);
			}
			
			private function onRenameMenuItem(event:Event):void
			{
				renameDisplay.display = true;
				RenameCustomLibraryItemDialog(renameDisplay.instance).symbolName = rightClickedItem.displayName;
				renameDisplay.instance.addEventListener(CloseEvent.CLOSE, onRenameClose);
			}
			
			private function onRenameClose(event:CloseEvent):void
			{
				renameDisplay.instance.removeEventListener(CloseEvent.CLOSE, onDeleteConfirmationClose);
				var newName:String = RenameCustomLibraryItemDialog(renameDisplay.instance).symbolName;
				renameDisplay.display = false;
				if(event.detail == Alert.OK)
				{
					var libraryEvent:LibraryItemEvent = new LibraryItemEvent(LibraryItemEvent.RENAME_LIBRARY_ITEM);
					libraryEvent.library = library;
					libraryEvent.item = rightClickedItem as LibraryItem;
					libraryEvent.name = newName;
					dispatchEvent(libraryEvent);
				}
			}
			
			private function onDeleteItemMenu(event:Event):void
			{
				deleteConfirmationDisplay.display = true;
				deleteConfirmationDisplay.instance.addEventListener(CloseEvent.CLOSE, onDeleteConfirmationClose);
			}
			
			private function onDeleteConfirmationClose(event:CloseEvent):void
			{
				deleteConfirmationDisplay.instance.removeEventListener(CloseEvent.CLOSE, onDeleteConfirmationClose);
				deleteConfirmationDisplay.display = false;
				if(event.detail == Alert.OK)
				{
					var libraryEvent:LibraryItemEvent = new LibraryItemEvent(LibraryItemEvent.REMOVE_LIBRARY_ITEM);
					libraryEvent.library = library;
					libraryEvent.item = rightClickedItem as LibraryItem;
					dispatchEvent(libraryEvent);
				}
			}
			
			private var _contextMenuEnabled:Boolean = false;
			
			public function get contextMenuEnabled():Boolean
			{
				return _contextMenuEnabled;
			}
			
			public function set contextMenuEnabled(value:Boolean):void
			{
				_contextMenuEnabled = value;
				invalidateProperties();
			}
			
			protected function onContextMenu(event:MouseEvent):void
			{
				var target:Object = event.target as ItemRenderer;
				if(target == null)
					target =  event.target.parentDocument as ItemRenderer;
				if(target)
				{
					rightClickedItem = (target as ItemRenderer).data;
					deleteMenuItem.visible = true;
					renameMenuItem.visible = true;
				}
				else
				{
					deleteMenuItem.visible = false;
					renameMenuItem.visible = false;
				}
			}

			protected override function commitProperties():void
			{
				super.commitProperties();
				if(_contextMenuEnabled)
					contextMenu = libraryMenu;
				else
					contextMenu = null;
			}

//			private function onNativeDragEnter(event:NativeDragEvent):void
//			{            	
//				if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
//				{    	
//					var dropFiles:Array = NativeDragEvent(event).clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
//					var hasWrongFormat:Boolean = false;
//					for each(var file:File in dropFiles)
//					{
//						var ext:String = file.extension.toLowerCase()
//						if (ext != "png" && ext != "jpg" && ext != "jpeg")
//						{
//							hasWrongFormat = true;
//						}
//					}
//					if(hasWrongFormat)
//					{
//						//Alert.show("Image must be a .png, .jpg or .swf file", "Wrong Format")
//						Alert.show("Image must be a .png or .jpg file", "Wrong Format")
//						return
//					}
//					else
//					{
//						NativeDragManager.acceptDragDrop(this);
//					}
//						
//				}
//			}
			
//			private function onNativeDragDrop(event:NativeDragEvent):void
//			{
//				NativeDragManager.dropAction = NativeDragActions.COPY;
//				var dropFiles:Array = NativeDragEvent(event).clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;		
//				if (dropFiles==null) return;
//				for each(var file:File in dropFiles)
//				{
//					var libraryEvent:LibraryItemEvent = new LibraryItemEvent(LibraryItemEvent.ADD_LIBRARY_ITEM);
//					libraryEvent.library = library;
//					libraryEvent.path = file.nativePath;
//					var filename:String = file.name;
//					var extensionIndex:Number = filename.lastIndexOf( '.' );
//					var extensionless:String = filename.substr( 0, extensionIndex );
//					var extension:String = filename.substr(extensionIndex, filename.length)
//					if (file.extension=="swf")
//					{
//						libraryEvent.importType = LibraryItemEvent.IMPORT_TYPE_SWF
//					}
//					else 
//					{						
//						libraryEvent.importType = LibraryItemEvent.IMPORT_TYPE_IMAGE
//					}
//					
//					libraryEvent.name = extensionless;
//					dispatchEvent(libraryEvent);
//				}
//			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<components:PopupDisplay id="deleteConfirmationDisplay" popup="{DeleteCustomSymbolDialog}" modal="true"/>
		<components:PopupDisplay id="renameDisplay" popup="{RenameCustomLibraryItemDialog}" modal="true"/>
	</fx:Declarations>
	<s:List creationComplete="onCreationComplete(event)" horizontalScrollPolicy="off" 
			itemRenderer="com.simplediagrams.view.itemRenderers.LibraryItemRenderer" dragEnabled="true"
			styleName="libraryTileList" dataProvider="{library.items}"
			dragStart="onDragStart(event)" width="100%" height="100%">
		<s:layout>
			<s:TileLayout horizontalGap="0" verticalGap="0" columnWidth="35" rowHeight="35" />
		</s:layout>
	</s:List>
	<s:Image verticalCenter="0" horizontalCenter="0" source="@Embed('assets/img/drag_here_from_desktop.png')" 
			 visible="{isAddItemVisible(library.custom, library.items.length)}"/>
</mx:Canvas>
