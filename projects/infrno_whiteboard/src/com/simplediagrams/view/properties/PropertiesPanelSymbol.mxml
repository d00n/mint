<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:properties="com.simplediagrams.view.properties.*"
		 creationComplete="onCC()"
		 >
	
	
	<s:layout>
		<s:HorizontalLayout paddingTop="5" paddingLeft="20" paddingRight="40"/>
	</s:layout>	
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.MultiSelectEvent;
			import com.simplediagrams.events.SelectionEvent;
			import com.simplediagrams.events.TextPropertyChangeEvent;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.model.RegistrationManager;
			import com.simplediagrams.model.SDObjectModel;
			import com.simplediagrams.model.SDSymbolModel;
			import com.simplediagrams.util.Logger;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			
			[Inject]
			[Bindable]
			public var diagramModel:DiagramModel		
			
			[PostConstruct]
			public function postConstruct():void
			{	
				resetProperties()				
			}
			
			[PreDestroy]
			public function preDestroy():void
			{
				diagramModel = null					
			}
			
			protected function onCC():void
			{
				resetProperties()				
			}
			
			
			[Bindable]		
			[Embed(source='assets/img/icons/text_bold.png')]
			private var boldIcon:Class
			
			[Bindable]
			protected var _fontsAC:ArrayCollection = new ArrayCollection( [	{ label:"6", data:6 },
				{ label:"8", data:8 },
				{ label:"9", data:9 },
				{ label:"10", data:10 },
				{ label:"12", data:12 },
				{ label:"14", data:14 },
				{ label:"18", data:18 },
				{ label:"24", data:24 },
				{ label:"30", data:30 },
				{ label:"36", data:36 },
				{ label:"48", data:48 },
				{ label:"60", data:60 },
				{ label:"72", data:72 } ] );
			
			[Bindable]
			[Embed(source="assets/img/icons/font_size.png")]
			protected var fontSizeIcon:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_left.png")]
			protected var textAlignLeft:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_center.png")]
			protected var textAlignCenter:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_right.png")]
			protected var textAlignRight:Class				
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_justify.png")]
			protected var textAlignJustify:Class		
			
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_above.png")]
			protected var textValignAbove:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_top.png")]
			protected var textValignTop:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_middle.png")]
			protected var textValignMiddle:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_bottom.png")]
			protected var textValignBottom:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_below.png")]
			protected var textValignBelow:Class	
											
			protected var _fontSize:String
			protected var _fontFamily:String
			protected var _textPosition:String = ""
			protected var _textAlign:String = "";
			protected var _startFontFamilyIndex:int = -1;
			protected var _internalPropChange:Boolean = true;
									
			[Bindable]
			[Inject(bean="registrationManager")]
			public var registrationManager:RegistrationManager	
											
			[Bindable]
			protected var _fontFamiliesAC:ArrayCollection
			
			
			[Inject(bean="applicationModel", property="fontsAC")]
			public function set fontFamiliesAC(value:ArrayCollection):void
			{
				if (_fontFamiliesAC==null)
				{
					_fontFamiliesAC = value
				}
			}
			
			[Mediate(event="MultiSelectEvent.DRAG_MULTI_SELECTION_FINISHED")]
			[Mediate(event="SelectionEvent.ADDED_TO_SELECTION")]
			[Mediate(event="SelectionEvent.REMOVED_FROM_SELECTION")]
			public function onMultiSelectFinished(event:Event):void
			{
				resetProperties()
			}
											
			
			
			protected function resetProperties():void
			{
				
				if (diagramModel==null || diagramModel.selectedArray.length==0) return	
					
				_internalPropChange = true
				var sdSymbolModelsArr:Array = diagramModel.selectedArray
					
				if (sdSymbolModelsArr.length==1)
				{
					setControlsFromModel()				
				}
				else
				{
					//blank out controls unless all models have same value
					
					var fontSizeSame:Boolean = true
					var textAlignSame:Boolean = true
					var textPositionSame:Boolean = true
					var fontFamilySame:Boolean = true
					var lastSymbolModel:SDSymbolModel
					for each (var sdSymbolModel:SDSymbolModel in sdSymbolModelsArr)
					{
						//skip first iteration
						if (lastSymbolModel==null) 
						{
							lastSymbolModel = sdSymbolModel
							continue
						}
						if (lastSymbolModel)
						{
							if (sdSymbolModel.fontSize != lastSymbolModel.fontSize)
							{
								fontSizeSame = false
							}
							if (sdSymbolModel.textAlign != lastSymbolModel.textAlign)
							{
								textAlignSame = false
							}
							if (sdSymbolModel.textPosition != lastSymbolModel.textPosition)
							{
								textPositionSame = false
							}
							if (sdSymbolModel.fontFamily != lastSymbolModel.fontFamily)
							{
								fontFamilySame = false
							}
						}	
						lastSymbolModel = sdSymbolModel
					}					
					
					if (fontSizeSame)
					{
						_fontSize = lastSymbolModel.fontSize.toString()
					}
					else
					{
						_fontSize = ""
					}
										
					if (textAlignSame)
					{
						_textAlign = lastSymbolModel.textAlign
					}
					else
					{
						_textAlign = ""
					}
					
					if (textPositionSame)
					{
						_textPosition = lastSymbolModel.textPosition
					}
					else
					{
						_textPosition = ""
					}
					
					if (fontFamilySame)
					{
						_fontFamily = lastSymbolModel.fontFamily
					}
					else
					{
						_fontFamily = ""
						ddlFontFamily.selectedIndex = -1
					}
					
					setControlsFromProps()		
					
				}
				_internalPropChange = false
			}
			
			protected function setControlsFromModel():void
			{				
				
				if (cbxFontSize==null || cbxFontSize.textInput==null) return
				if (diagramModel.selectedArray[0] && diagramModel.selectedArray[0] is SDSymbolModel)
				{
					var sdSymbolModel:SDSymbolModel = diagramModel.selectedArray[0] as SDSymbolModel
					setTextAlign(sdSymbolModel.textAlign)
					setTextPosition(sdSymbolModel.textPosition)
					cbxFontSize.textInput.text = sdSymbolModel.fontSize.toString()
					setFontFamilyDropDownList(sdSymbolModel.fontFamily)
				}
			}
			
			protected function setControlsFromProps():void
			{						
				
				if (cbxFontSize==null) return
				setTextAlign(this._textAlign)
				setTextPosition(this._textPosition)
				cbxFontSize.textInput.text = this._fontSize
				setFontFamilyDropDownList(_fontFamily)				
			}
			
			
			protected function setFontFamilyDropDownList(fontFamily:String):void
			{
				if (fontFamily=="") return
				if (ddlFontFamily.selectedItem && ddlFontFamily.selectedItem.fontName==fontFamily) return
					
				var len:uint = _fontFamiliesAC.length
				for (var i:uint=0;i<len;i++)
				{
					if (_fontFamiliesAC.getItemAt(i).fontName == fontFamily)
					{
						ddlFontFamily.selectedIndex = i						
						return
					}
				}
			}
						
			
		
			protected function setTextAlign(textAlign:String):void
			{
				switch (textAlign)
				{
					case "left":
						btnBar.selectedIndex = 0
						break
					
					case "center":
						btnBar.selectedIndex = 1						
						break
					
					case "right":
						btnBar.selectedIndex = 2						
						break
					
					case "justify":
						btnBar.selectedIndex = 3						
						break
					
					default:
						btnBar.selectedIndex = -1					
				}
			}
			
			protected function setTextPosition(textPosition:String):void
			{
				switch (textPosition)
				{
					case SDObjectModel.TEXT_POSITION_ABOVE:
						btnBarValign.selectedIndex = 0
						break
					case SDObjectModel.TEXT_POSITION_TOP:
						btnBarValign.selectedIndex = 1
						break
					case SDObjectModel.TEXT_POSITION_MIDDLE:
						btnBarValign.selectedIndex = 2						
						break
					case SDObjectModel.TEXT_POSITION_BOTTOM:
						btnBarValign.selectedIndex = 3						
						break
					case SDObjectModel.TEXT_POSITION_BELOW:
						btnBarValign.selectedIndex = 4						
						break
					default:
						Logger.debug("trying to deselect the vAlign button bar",this)
						btnBarValign.selectedIndex = -1				
				
				}
			}
			
			
			protected function onFontSizeChange(event:Event):void
			{		
				callLater(fontSizeUpdated)				
			}
			
			protected function fontSizeUpdated():void
			{
				if (_internalPropChange==false)
				{
					if (cbxFontSize.textInput.text=="") return
					var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_SIZE, true)
					evt.fontSize = Number(cbxFontSize.textInput.text)
					dispatchEvent(evt)
				}
			}
			
			protected function onFontFamilyChange():void
			{								
				if (registrationManager.isLicensed==false) return
				if (_internalPropChange==false)
				{
					if (ddlFontFamily.selectedItem)
					{										
						var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_FAMILY, true)
						evt.fontFamily = ddlFontFamily.selectedItem.fontName
						dispatchEvent(evt)
					}
				}
			}
			
			
			protected function onTextAlignChange():void
			{				
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_TEXT_ALIGN, true)
				if (_internalPropChange==false)
				{
					if (btnBar.selectedItem && btnBar.selectedItem.label)
					{
						evt.textAlign = btnBar.selectedItem.label
						dispatchEvent(evt)
					}
				}
			}
			
			protected function onBoldChange():void
			{
				if (_internalPropChange==false)
				{
					var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_WEIGHT, true)				
					if (btnBold.selected)
					{
						evt.fontWeight = "bold"
					}
					else
					{
						evt.fontWeight = "normal"
					}
					dispatchEvent(evt)	
				}
			}
						
			protected function onTextPositionChange():void
			{				
				if (_internalPropChange==false)
				{
					var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_TEXT_POSITION, true)					
					if (btnBarValign && btnBarValign.selectedItem && btnBarValign.selectedItem.label)
					{
						evt.textPosition = btnBarValign.selectedItem.label
						dispatchEvent(evt)
					}
				}
				
			}
		
			
			protected function onFontFamilyDDLClose():void
			{
				if (registrationManager.isLicensed==false)
				{
					Alert.show("Font selection is only available to Full Version users. Visit simpledigrams.com and upgrade to Full Version today!", 
						"Full Version Only")			
					ddlFontFamily.selectedIndex = this._startFontFamilyIndex
				}
			}
		]]>
	</fx:Script>
		
	<mx:Image source="{fontSizeIcon}" width="20" height="20" />
	
	
	<s:ComboBox
	 	requireSelection="false"
		id="cbxFontSize" 
		dataProvider="{_fontsAC}"
		change="onFontSizeChange(event)"
		restrict="0-9"	    
		height="21"
		width="60"/>
	
	<s:ButtonBar id="btnBar"
				 skinClass="com.simplediagrams.view.properties.TextAlignButtonBarSkin"
				 click="onTextAlignChange()"
				 requireSelection="false"
				 width="80">
		<s:dataProvider>
			<s:ArrayList>
				<fx:Object label="left"
						   icon="{textAlignLeft}" 
						   />
				<fx:Object label="center"
						   icon="{textAlignCenter}" 
						   />
				<fx:Object label="right"
						   icon="{textAlignRight}" 
						   />
				<fx:Object label="justify"
						   icon="{textAlignJustify}" />
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<s:ButtonBar id="btnBarValign"
				 skinClass="com.simplediagrams.view.properties.TextAlignButtonBarSkin"
				 click="onTextPositionChange()"
				 requireSelection="false"
				 width="100">
		<s:dataProvider>
			<s:ArrayList>
				<fx:Object label="above"
						   icon="{textValignAbove}" 
						   toolTip="Align text above"
						   />
				<fx:Object label="top"
						   icon="{textValignTop}" 
						   toolTip="Align text to top"
						   />
				<fx:Object label="middle"
						   icon="{textValignMiddle}" 
						   toolTip="Align text to middle"
						   />
				<fx:Object label="bottom"
						   icon="{textValignBottom}" 
						   toolTip="Align text to bottom"
						   />
				<fx:Object label="below"
						   icon="{textValignBelow}"
						   toolTip="Align text below symbol" />
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<s:ToggleButton id="btnBold"
			  		click="onBoldChange()"
			    	label="B"
					width="30"
					/>
	
	<s:DropDownList
		id="ddlFontFamily" 
		dataProvider="{_fontFamiliesAC}"
		labelField="fontName"	
		close="onFontFamilyDDLClose()"
		change="onFontFamilyChange()"
		width="100%"
		maxWidth="250"
		>
		<s:layout>				
			<s:VerticalLayout gap="0"								  
							  variableRowHeight="true"								  
							  horizontalAlign="justify" />				
		</s:layout>
		
	</s:DropDownList>

	
	
	
	
</s:Group>
