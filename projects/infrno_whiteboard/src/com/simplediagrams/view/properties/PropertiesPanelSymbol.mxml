<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:properties="com.simplediagrams.view.properties.*"
		 creationComplete="onCreationComplete()" xmlns:components="com.simplediagrams.view.components.*"
		 >
	
	
	<s:layout>
		<s:HorizontalLayout paddingTop="5" paddingLeft="20" paddingRight="40"/>
	</s:layout>	
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.LineStyleEvent;
			import com.simplediagrams.events.MultiSelectEvent;
			import com.simplediagrams.events.SelectionEvent;
			import com.simplediagrams.events.TextPropertyChangeEvent;
			import com.simplediagrams.model.ApplicationModel;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.model.PropertiesPanelModel;
			import com.simplediagrams.model.RegistrationManager;
			import com.simplediagrams.model.SDObjectModel;
			import com.simplediagrams.model.SDSymbolModel;
			import com.simplediagrams.util.Logger;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			private var _propertiesModel:PropertiesPanelModel;
			
			
			
			
			
			
			[Bindable]		
			[Embed(source='assets/img/icons/text_bold.png')]
			private var boldIcon:Class
			
			[Bindable]
			protected var _fontsAC:ArrayCollection = new ArrayCollection( [	{ label:"6", data:6 },
				{ label:"8", data:8 },
				{ label:"9", data:9 },
				{ label:"10", data:10 },
				{ label:"12", data:12 },
				{ label:"14", data:14 },
				{ label:"18", data:18 },
				{ label:"24", data:24 },
				{ label:"30", data:30 },
				{ label:"36", data:36 },
				{ label:"48", data:48 },
				{ label:"60", data:60 },
				{ label:"72", data:72 } ] );
			
			[Bindable]
			[Embed(source="assets/img/icons/font_size.png")]
			protected var fontSizeIcon:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_left.png")]
			protected var textAlignLeft:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_center.png")]
			protected var textAlignCenter:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_right.png")]
			protected var textAlignRight:Class				
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_justify.png")]
			protected var textAlignJustify:Class		
			
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_above.png")]
			protected var textValignAbove:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_top.png")]
			protected var textValignTop:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_middle.png")]
			protected var textValignMiddle:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_bottom.png")]
			protected var textValignBottom:Class	
			
			[Bindable]
			[Embed(source="assets/img/icons/text_valign_below.png")]
			protected var textValignBelow:Class	
			
			
			[Bindable]
			protected var _lineWeightsAC:ArrayCollection = new ArrayCollection ( [ 	{label:"1", data:1 },
				{label:"2", data:2 },
				{label:"3", data:3 },
				{label:"4", data:4 },
				{label:"5", data:5 },
				{label:"6", data:6 },
				{label:"7", data:7 },
				{label:"8", data:8 },
				{label:"9", data:9 },
				{label:"10", data:10 } ] );
			
		
			
			[Bindable]
			protected var _fontFamiliesAC:ArrayCollection
			
			
			
			
			[Inject(bean="applicationModel", property="fontsAC")]
			public function set fontFamiliesAC(value:ArrayCollection):void
			{
				if (_fontFamiliesAC==null)
				{
					_fontFamiliesAC = value
				}
			}
			
			[Bindable]
			[Inject(bean="registrationManager")]
			public var registrationManager:RegistrationManager	
			
			[Bindable]
			[Inject]
			public function get propertiesModel():PropertiesPanelModel
			{
				return _propertiesModel;
			}
			
			
			
			
			public function set propertiesModel(value:PropertiesPanelModel):void
			{
				ddlLineWeight.visible = lblWeight.visible = true
				if(_propertiesModel)
				{
					_propertiesModel.removeEventListener(PropertiesPanelModel.SELECTION_CHANGED, onSelectionChange);
				}
				_propertiesModel = value;
				if(_propertiesModel)
				{
					_propertiesModel.addEventListener(PropertiesPanelModel.SELECTION_CHANGED, onSelectionChange);
					if (_propertiesModel.allObjectsAreSWFItems)
					{
						ddlLineWeight.visible = lblWeight.visible = false
					}
				}
			}
			
			private function onSelectionChange(event:Event):void
			{
				if(_propertiesModel == null) return;
				ddlLineWeight.visible = lblWeight.visible = true
				if(cbxFontSize && cbxFontSize.textInput)
				{
					cbxFontSize.textInput.text = _propertiesModel.fontSize;
				}
				if(btnBar)
				{
					btnBar.selectedIndex = getTextAlignIndex(_propertiesModel.textAlign);
				}
				if(btnBarValign)
				{
					btnBarValign.selectedIndex = getTextPositionIndex(_propertiesModel.textPosition);
				}
				if(btnBold)
				{
					btnBold.selected = isFontWeightSelected(_propertiesModel.fontWeight);
				}
				if(cbxFontFamily)
				{
					cbxFontFamily.selectedIndex = getSelectedFontFamilyIndex(_propertiesModel.fontFamily);
				}
				if(ddlLineWeight)
				{
					ddlLineWeight.selectedIndex = getLineWidthIndex(_propertiesModel.lineWeight);
				}
				if (_propertiesModel.allObjectsAreSWFItems)
				{
					ddlLineWeight.visible = lblWeight.visible = false
				}
			}
			
			public function getSelectedFontFamilyIndex(fontFamily:String):int
			{
				if (fontFamily=="") return 0;				
				var len:uint = _fontFamiliesAC.length;
				for (var i:uint=0;i < len;i++)
				{
					if (_fontFamiliesAC.getItemAt(i).fontName == fontFamily)
					{
						return i;
					}
				}
				return 0;
			}
			
			protected function getLineWidthIndex(lineWidth:String):int
			{
				if(lineWidth == "")
				{
					return -1;
				}
				var len:uint = _lineWeightsAC.length;
				for (var i:uint=0;i < len;i++)
				{
					if (_lineWeightsAC.getItemAt(i).label == lineWidth)
					{
						return i;
					}
				}
				return -1;
			}
			
			protected function isFontWeightSelected(fontWeight:String):Boolean
			{
				return (fontWeight == "bold");
			}
			
			private function onCreationComplete():void
			{
				onSelectionChange(null);
			}
			
			
			
			
			
			protected function getTextAlignIndex(textAlign:String):int
			{
				var index:int = -1;
				switch (textAlign)
				{
					case "left":
						index = 0
						break
					case "center":
						index = 1;
						break
					case "right":
						index = 2
						break
					case "justify":
						index = 3
						break
					default:
						index = -1;							
				}
				return index;
			}
			
			
			protected function getTextPositionIndex(textPosition:String):int
			{
				var index:int = -1;
				switch (textPosition)
				{
					case SDSymbolModel.TEXT_POSITION_ABOVE:
						index = 0
						break
					case SDSymbolModel.TEXT_POSITION_TOP:
						index = 1
						break
					case SDSymbolModel.TEXT_POSITION_MIDDLE:
						index = 2						
						break
					case SDSymbolModel.TEXT_POSITION_BOTTOM:
						index = 3						
						break
					case SDSymbolModel.TEXT_POSITION_BELOW:
						index = 4						
						break
					default:
						index = -1				
				
				}
				return index;
			}
			
			
			protected function onFontSizeChange(event:Event):void
			{		
				callLater(fontSizeUpdated)				
			}
			
			protected function fontSizeUpdated():void
			{
				if (cbxFontSize.textInput.text=="") return
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_SIZE, true)
				evt.fontSize = Number(cbxFontSize.textInput.text)	
				dispatchEvent(evt)
			}
			
			protected function onFontFamilyChange():void
			{								
				if (cbxFontFamily.selectedIndex>=0)
				{										
					var font:Font = _fontFamiliesAC.getItemAt(cbxFontFamily.selectedIndex) as Font
					if (font)
					{
						var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_FAMILY, true)
						evt.fontFamily = font.fontName
						dispatchEvent(evt)
					}
				}
			}
			
			
			protected function onTextAlignChange():void
			{				
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_TEXT_ALIGN, true)
				if (btnBar.selectedItem && btnBar.selectedItem.label)
				{
					evt.textAlign = btnBar.selectedItem.label
					dispatchEvent(evt)
				}
			}
			
			protected function onBoldChange():void
			{
					var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_WEIGHT, true)				
					if (btnBold.selected)
						evt.fontWeight = "bold";
					else
						evt.fontWeight = "normal";
					dispatchEvent(evt);	
			}
						
			protected function onTextPositionChange():void
			{				
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_TEXT_POSITION, true)					
				if (btnBarValign && btnBarValign.selectedItem && btnBarValign.selectedItem.label)
				{
					evt.textPosition = btnBarValign.selectedItem.label
					dispatchEvent(evt)
				}
			}
		
			protected function onLineWeightChange():void
			{
					if (ddlLineWeight.selectedIndex==-1) return;
					var event:LineStyleEvent = new LineStyleEvent(LineStyleEvent.SYMBOL_LINE_WEIGHT_CHANGE, true)
					event.lineWeight = ddlLineWeight.selectedItem.data
					dispatchEvent(event)
			}
			
			
			protected function onFontFamilyCBXClose():void
			{
				
			}
			
			
			
		]]>
	</fx:Script>
		
	<s:Image source="{fontSizeIcon}" width="20" height="20" />
	
	
	<s:ComboBox
	 	requireSelection="false"
		id="cbxFontSize" 
		dataProvider="{_fontsAC}"
		change="onFontSizeChange(event)"
		restrict="0-9"	    
		height="21"
		width="60"/>
	
	<s:ButtonBar id="btnBar"
				 skinClass="com.simplediagrams.view.properties.TextAlignButtonBarSkin"
				 click="onTextAlignChange()"
				 requireSelection="false"
				 width="80">
		<s:dataProvider>
			<s:ArrayList>
				<fx:Object label="left"
						   icon="{textAlignLeft}" 
						   />
				<fx:Object label="center"
						   icon="{textAlignCenter}" 
						   />
				<fx:Object label="right"
						   icon="{textAlignRight}" 
						   />
				<fx:Object label="justify"
						   icon="{textAlignJustify}" />
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<s:ButtonBar id="btnBarValign"
				 skinClass="com.simplediagrams.view.properties.TextAlignButtonBarSkin"
				 click="onTextPositionChange()"
				 requireSelection="false"
				 width="100">
		<s:dataProvider>
			<s:ArrayList>
				<fx:Object label="above"
						   icon="{textValignAbove}" 
						   toolTip="Align text above"
						   />
				<fx:Object label="top"
						   icon="{textValignTop}" 
						   toolTip="Align text to top"
						   />
				<fx:Object label="middle"
						   icon="{textValignMiddle}" 
						   toolTip="Align text to middle"
						   />
				<fx:Object label="bottom"
						   icon="{textValignBottom}" 
						   toolTip="Align text to bottom"
						   />
				<fx:Object label="below"
						   icon="{textValignBelow}"
						   toolTip="Align text below symbol" />
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<s:ToggleButton id="btnBold"
			  		click="onBoldChange()"
			    	label="B"
					width="30"
					/>
	
	<components:FontStyleList
		id="cbxFontFamily" 
		dataProvider="{_fontFamiliesAC}"
		labelField="fontName"	
		close="onFontFamilyCBXClose()"
		change="onFontFamilyChange()"
		width="100%"
		maxWidth="250"
		/>

	
	
	<s:Label id="lblWeight" text="weight:" paddingTop="7" paddingLeft="10" visible="{propertiesModel.showLineWeight}" />
	
	<s:DropDownList id="ddlLineWeight"
					dataProvider="{_lineWeightsAC}"
					change="onLineWeightChange()"
					height="23"
					width="55"
					visible="{propertiesModel.showLineWeight}"
					/>
	
</s:Group>
