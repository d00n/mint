<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:properties="com.simplediagrams.view.properties.*"
	creationComplete="onCreationComplete()" xmlns:components="com.simplediagrams.view.components.*"
	>
	
	
	<s:layout>
		<s:HorizontalLayout paddingTop="5" paddingLeft="20" paddingRight="40" />
	</s:layout>	
	
	<fx:Script>
		<![CDATA[
			import com.simplediagrams.events.MultiSelectEvent;
			import com.simplediagrams.events.SelectionEvent;
			import com.simplediagrams.events.TextPropertyChangeEvent;
			import com.simplediagrams.model.ApplicationModel;
			import com.simplediagrams.model.DiagramModel;
			import com.simplediagrams.model.PropertiesPanelModel;
			import com.simplediagrams.model.RegistrationManager;
			import com.simplediagrams.model.SDObjectModel;
			import com.simplediagrams.model.SDTextAreaModel;
			import com.simplediagrams.util.Logger;
			import com.simplediagrams.view.SDComponents.SDTextArea;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			
			[Bindable]
			[Embed(source="assets/img/icons/font_size.png")]
			protected var fontSize:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_left.png")]
			protected var textAlignLeft:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_center.png")]
			protected var textAlignCenter:Class														
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_right.png")]
			protected var textAlignRight:Class				
			
			[Bindable]
			[Embed(source="assets/img/icons/text_align_justify.png")]
			protected var textAlignJustify:Class					
			
			
			[Bindable]
			protected var _fontsAC:ArrayCollection = new ArrayCollection( [	{ label:"6", data:6 },
																		{ label:"8", data:8 },
																		{ label:"9", data:9 },
																		{ label:"10", data:10 },
																		{ label:"12", data:12 },
																		{ label:"14", data:14 },
																		{ label:"18", data:18 },
																		{ label:"24", data:24 },
																		{ label:"30", data:30 },
																		{ label:"36", data:36 },
																		{ label:"48", data:48 },
																		{ label:"60", data:60 },
																		{ label:"72", data:72 } ] );
			
			
			[Bindable]
			[Inject(bean="applicationModel", property="fontsAC")]
			public var fontFamiliesAC:ArrayCollection	
			
						
			[Bindable]			
			[Inject]
			public var registrationManager:RegistrationManager;
						
			private var _propertiesModel:PropertiesPanelModel;

			[Bindable]
			[Inject]
			public function get propertiesModel():PropertiesPanelModel
			{
				return _propertiesModel;
			}
			
			public function set propertiesModel(value:PropertiesPanelModel):void
			{
				if(_propertiesModel)
				{
					_propertiesModel.removeEventListener(PropertiesPanelModel.SELECTION_CHANGED, onSelectionChange);
				}
				_propertiesModel = value;
				onSelectionChange(null);
				if(_propertiesModel)
				{
					_propertiesModel.addEventListener(PropertiesPanelModel.SELECTION_CHANGED, onSelectionChange);
				}
			}
			
			private function onSelectionChange(event:Event):void
			{
				if(_propertiesModel == null) return;
				if(cbxFontSize && cbxFontSize.textInput)
				{
					cbxFontSize.textInput.text = _propertiesModel.fontSize;
				}
				if(btnBar)
				{
					btnBar.selectedIndex = getTextAlignIndex(_propertiesModel.textAlign);
				}
				if(btnBold)
				{
					btnBold.selected = isFontWeightSelected(_propertiesModel.fontWeight);
				}
				if(cbxFontFamily)
				{
					cbxFontFamily.selectedIndex = getSelectedFontFamilyIndex(_propertiesModel.fontFamily);
				}
				if(colorPicker && colorPicker.visible)
				{
					colorPicker.selectedColor = _propertiesModel.backgroundColor
				}
			}
			
			private function onCreationComplete():void
			{
				onSelectionChange(null);
			}
			
			
	

			protected function getTextAlignIndex(textAlign:String):int
			{
				var index:int = -1;
				switch (textAlign)
				{
					case "left":
						index = 0
						break
					case "center":
						index = 1;
						break
					case "right":
						index = 2
						break
					case "justify":
						index = 3
						break
					default:
						index = -1;							
				}
				return index;
			}
			
			
			public function getSelectedFontFamilyIndex(fontFamily:String):int
			{
				if (fontFamily=="" || fontFamiliesAC == null) return 0;				
				var len:uint = fontFamiliesAC.length;
				for (var i:uint=0;i < len;i++)
				{
					if (fontFamiliesAC.getItemAt(i).fontName == fontFamily)
					{
						return i;
					}
				}
				return 0;
			}
			
			protected function isFontWeightSelected(fontWeight:String):Boolean
			{
				return (fontWeight == "bold");
			}
			
			protected function onFontSizeChange():void
			{	
				callLater(fontSizeUpdated)	
			}
			
			
			protected function fontSizeUpdated():void
			{
				if (cbxFontSize.textInput.text=="") return
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_SIZE, true)
				evt.fontSize = Number(cbxFontSize.textInput.text)
				dispatchEvent(evt);
			}
			
			protected function onFontFamilyCBXChange():void
			{									
				if (cbxFontFamily.selectedIndex>=0)
				{										
					var font:Font = fontFamiliesAC.getItemAt(cbxFontFamily.selectedIndex) as Font
					if (font)
					{
						var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_FAMILY, true)
						evt.fontFamily = font.fontName
						dispatchEvent(evt)
					}
				}
			}
			
			protected function onTextAlignChange():void
			{							
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_TEXT_ALIGN, true)
				evt.textAlign = btnBar.selectedItem.label
				dispatchEvent(evt)
			}
			
			
			protected function onBoldChange():void
			{
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_FONT_WEIGHT, true)
				if (btnBold.selected)
				{
					evt.fontWeight = "bold"
				}
				else
				{
					evt.fontWeight = "normal"
				}
				dispatchEvent(evt);
			}
			
							
			protected function onFontFamilyCBXClose():void
			{
				
			}
			
			
			protected function onColorPickerChange():void
			{
				var evt:TextPropertyChangeEvent = new TextPropertyChangeEvent(TextPropertyChangeEvent.CHANGE_BACKGROUND_COLOR, true)
				evt.backgroundColor = colorPicker.selectedColor
				dispatchEvent(evt)
			}
			

		]]>
	</fx:Script>

	<s:Image source="{fontSize}" width="20" height="20" />
	<s:ComboBox
				 id="cbxFontSize"
  				 dataProvider="{_fontsAC}"
				 restrict="0-9"		
				 change="onFontSizeChange()"
				 toolTip="Font size"
				 height="21"
				 width="60"/>
	
	<s:ButtonBar id="btnBar"
				 requireSelection="true"
				 skinClass="com.simplediagrams.view.properties.TextAlignButtonBarSkin"
				 click="onTextAlignChange()"
				 toolTip="Text align"
				 width="80">
		<s:dataProvider>
			<s:ArrayList>
				<fx:Object label="left"
						   icon="{textAlignLeft}" 
						   />
				<fx:Object label="center"
						   icon="{textAlignCenter}" 
						   />
				<fx:Object label="right"
						   icon="{textAlignRight}" 
						   />
				<fx:Object label="justify"
						   icon="{textAlignJustify}" />
			</s:ArrayList>
		</s:dataProvider>
	</s:ButtonBar>
	
	<s:ToggleButton id="btnBold" 
					click="onBoldChange()"
					label="B"
					toolTip="Bold"
					width="30"
					/>
	
	<!-- components:FontStyleList -->
	<s:ComboBox
		id="cbxFontFamily" 
		dataProvider="{fontFamiliesAC}"
		labelField="fontName"	
		toolTip="font family"
	    close="onFontFamilyCBXClose()"
		change="onFontFamilyCBXChange()"
		width="100%"
		maxWidth="250"
		/>
		


	<s:Spacer width="5"/>
	<s:Label text="Bg:" toolTip="Background color" paddingTop="7" />
	<mx:ColorPicker id="colorPicker"
					toolTip = "Background color"
					change="onColorPickerChange()"
					visible="{_propertiesModel.allHaveBackground}"
					/>


	
	
	
</s:Group>
