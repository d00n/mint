<?xml version="1.0" encoding="utf-8"?>
<!---
	 The default skin class for the flex.utils.spark.TitledBorderBox container.
	 @see flex.utils.spark.TitledBorderBox
	 @author Chris Callendar
	 @date June 1st, 2010
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	minHeight="20"
	minWidth="40"
	alpha.disabled="0.5">
	<fx:Metadata>[HostComponent("flex.utils.spark.TitledBorderBox")]</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.utils.StringUtil;

			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;

			override protected function measure():void {
				super.measure();
				if (titleLabel.text) {
					var minW:Number = titleLabel.measuredWidth + 32;
					if (measuredMinWidth < minW) {
						measuredMinWidth = minW;
					}
					var minH:Number = titleLabel.measuredHeight;
					if (measuredMinHeight < minH) {
						measuredMinHeight = minH;
					}
				}
			}

			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				var hasTitle:Boolean = (titleLabel.text != null) && (titleLabel.text.length > 0);
				var borderVisible:Boolean = !(getStyle("borderVisible") == false);
				background.visible = !(getStyle("backgroundVisible") == false);
				border.visible = borderVisible && hasTitle;
				noTitleBorder.visible = borderVisible && !hasTitle;
				dropShadow.visible = !(getStyle("dropShadowVisible") == false);
				if (background.visible) {
					bgFill.color = getStyle("backgroundColor");
					bgFill.alpha = getStyle("backgroundAlpha");
				}
				if (borderVisible) {
					borderStroke.color = uint(getStyle("borderColor"));
					borderStroke.alpha = getStyle("borderAlpha");
					borderStroke.weight = Math.max(1, int(getStyle("borderWeight")));
					noTitleBorderStroke.color = borderStroke.color;
					noTitleBorderStroke.alpha = borderStroke.alpha;
					noTitleBorderStroke.weight = borderStroke.weight;
				}

				var cr:int = Math.min(10, Math.max(0, int(getStyle("cornerRadius"))));
				background.radiusX = background.radiusY = cr;
				dropShadow.tlRadius = dropShadow.trRadius = dropShadow.blRadius = dropShadow.brRadius = cr + 1;

				var metrics:TextLineMetrics = titleLabel.measureText(titleLabel.text);
				var textHeight:Number = (titleLabel.text ? titleLabel.measuredHeight : 0);
				var textWidth:Number = metrics.width;
				var ty:int = Math.floor(textHeight / 2);

				var borderWeight:int = borderStroke.weight;
				if (hasTitle) {
					border.top = ty;
					background.top = ty;
					dropShadow.top = ty;
					titleLabel.top = Math.floor(borderWeight / 2);

					var x0:int = 0;
					var x1:int = int(titleLabel.left) - 4;
					var x2:int = x1 + textWidth + 6;
					var x3:int = width - borderWeight;
					var y0:int = ty;
					var y1:int = height - borderWeight;

					x3 = Math.max(0, x3);
					x2 = Math.min(x2, x3 - 10);
					x1 = Math.min(x1, x3);
					y1 = Math.max(y1, y0);

					var path:String;
					if (cr == 0) {
						path = StringUtil.substitute("M {0} {1} H {2} V {3} H {4} V {5} H {6}",
													 x2, y0, x3, y1, x0, y0, x1);
					} else {
						var x0cr:int = x0 + cr;
						var x3cr:int = x3 - cr;
						var y0cr:int = y0 + cr;
						var y1cr:int = y1 - cr;
						var q1:String = StringUtil.substitute("{0} {1} {2} {3}", x3, y0, x3, y0cr);
						var q2:String = StringUtil.substitute("{0} {1} {2} {3}", x3, y1, x3cr, y1);
						var q3:String = StringUtil.substitute("{0} {1} {2} {3}", x0, y1, x0, y1cr);
						var q4:String = StringUtil.substitute("{0} {1} {2} {3}", x0, y0, x0cr, y0);
						path = StringUtil.substitute("M {0} {1} H {2} Q {3} V {4} Q {5} H {6} Q {7} V {8} Q {9} H {10}",
													 x2, y0, x3cr, q1, y1cr, q2, x0cr, q3, y0cr, q4, x1);
					}
					border.data = path;
				} else {
					border.top = 0;
					background.top = 0;
					dropShadow.top = 0;
					noTitleBorder.radiusX = cr;
				}

				if ((contentGroup.layout is VerticalLayout) || (contentGroup.layout is HorizontalLayout)) {
					// Vertical/Horizontal layouts support the padding styles
					contentGroup.left = borderWeight;
					contentGroup.right = borderWeight;
					contentGroup.top = Math.max(borderWeight, textHeight);
					contentGroup.bottom = borderWeight;
				} else {
					// Basic/Tile layouts don't support the padding styles, so add them in here
					contentGroup.left = borderWeight + int(getStyle("paddingLeft"));
					contentGroup.top = Math.max(borderWeight, textHeight) + int(getStyle("paddingTop"));
					contentGroup.right = borderWeight + int(getStyle("paddingRight"));
					contentGroup.bottom = borderWeight + int(getStyle("paddingBottom"));
				}
				// copy any valid layout styles into the contentGroup layout object
				copyLayoutStyle("paddingLeft");
				copyLayoutStyle("paddingTop");
				copyLayoutStyle("paddingRight");
				copyLayoutStyle("paddingBottom");
				copyLayoutStyle("horizontalGap", "gap");
				copyLayoutStyle("verticalGap", "gap");
				copyLayoutStyle("gap");
				copyLayoutStyle("columnWidth");
				copyLayoutStyle("rowHeight");
				copyLayoutStyle("horizontalAlign", null, false);
				copyLayoutStyle("verticalAlign", null, false);

				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			private function copyLayoutStyle(styleProp:String, layoutProp:String = null, isNumber:Boolean = true):void {
				var style:Object = getStyle(styleProp);
				var num:Number = getStyle(styleProp); // Number(null) == 0, not NaN!
				if (!layoutProp) {
					layoutProp = styleProp;
				}
				if (isNumber && !isNaN(num) && contentGroup.layout.hasOwnProperty(layoutProp)) {
					contentGroup.layout[layoutProp] = Math.max(0, int(num));
				} else if (!isNumber && (style != null) && contentGroup.layout.hasOwnProperty(layoutProp)) {
					contentGroup.layout[layoutProp] = style;
				}
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<s:RectangularDropShadow id="dropShadow"
		bottom="0"
		left="0"
		right="0"
		top="0"/>

	<!--- Defines the appearance of the SkinnableContainer class's background. -->
	<s:Rect id="background"
		bottom="0"
		left="0"
		right="0"
		top="0">
		<s:fill>
			<s:SolidColor id="bgFill"
				color="#FFFFFF"/>
		</s:fill>
	</s:Rect>

	<!--- Defines the border that is drawn around this box, doesn't draw a line where the title label is -->
	<s:Path id="border"
		bottom="0"
		left="0"
		right="0"
		top="0">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke"
				color="#000000"
				alpha="1"
				caps="square"
				pixelHinting="true"
				weight="1"/>
		</s:stroke>
	</s:Path>

	<!--- Defines the border that is drawn around this box when there is no label -->
	<s:Rect id="noTitleBorder"
		bottom="0"
		left="0"
		right="0"
		top="0">
		<s:stroke>
			<s:SolidColorStroke id="noTitleBorderStroke"
				color="#000000"
				alpha="1"
				pixelHinting="true"
				weight="1"/>
		</s:stroke>
	</s:Rect>

	<s:Label id="titleLabel"
		styleName="{getStyle('titleStyleName')}"
		text="{hostComponent.title}"
		left="15"
		right="15"
		top="0"
		lineBreak="explicit"/>

	<s:Group id="contentGroup"
		minHeight="0"
		minWidth="0"
		bottom="0"
		left="0"
		right="0"
		top="0">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
	</s:Group>


</s:Skin>
