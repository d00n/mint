<?xml version="1.0" encoding="utf-8"?>

<!--
	 Scroller unconditionally sets its skin's layout to private layout
	 implementation that handles the scroll policies.  Scroller skins can
	 only provide replacement scrollbars.  The skin's layout and
	 constraints or dimensions set on skin parts will not be honored.  To
	 gain more control over the layout of a viewport and its scrollbars,
	 instead of using Scroller, add them to a Group and use the ScrollBar component's
	 viewport property to link them together.
-->

<!--- The skin class for the Spark Scroller component.

	 @see spark.components.Scroller
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:local="*"
	xmlns:resize="flex.utils.spark.resize.*"
	creationComplete="created(event)">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Scroller")]
    ]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;

			import spark.components.supportClasses.Skin;

			/**
			 *  @private
			 */
			override public function beginHighlightBitmapCapture():Boolean {
				var needUpdate:Boolean = super.beginHighlightBitmapCapture();

				// Draw an opaque rect that fill our entire skin. Our background
				// is transparent, but we don't want focus/error skins to
				// poke through.  This is safe to do since we don't have any 
				// graphic elements as direct children.
				graphics.beginFill(0);
				graphics.drawRect(0, 0, width, height);
				graphics.endFill();

				return needUpdate;
			}

			/**
			 *  @private
			 */
			override public function endHighlightBitmapCapture():Boolean {
				var needUpdate:Boolean = super.endHighlightBitmapCapture();

				// Clear the rect we drew in beginBitmapCapture();
				graphics.clear();

				return needUpdate;
			}

			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w, h);
				resizeHandle.x = w - resizeHandle.width - 1;
				resizeHandle.y = h - resizeHandle.height - 1;
			}

			[Bindable]
			public var resizeManager:ResizeManager;

			private function created(event:FlexEvent):void {
				// the component being resized is assumed to be the parent of the scroller
				// since most scrollers set left/right/top/bottom=0
				var resizeComponent:UIComponent = (hostComponent.parent as UIComponent);
				// Sometimes the parent is actually a skin, in which case we need to resize the host component, not the skin
				if (resizeComponent is Skin) {
					resizeComponent = (resizeComponent["hostComponent"] as UIComponent);
				}
				resizeManager = new ResizeManager(resizeComponent, resizeHandle);
			}
		]]>
	</fx:Script>

	<!---  A vertical scrollbar that lets you control the portion of data that is displayed
		 when there is too much data to fit vertically in a display area.
		 The Scroller determines whether the vertical ScrollBar is visible. -->
	<resize:ResizableVScrollBar id="verticalScrollBar"
		visible="false"/>

	<!---  A horizontal scrollbar that lets you control the portion of data that is displayed
		 when there is too much data to fit horizontally in a display area.
		 The Scroller determines whether the horizontal ScrollBar is visible. -->
	<resize:ResizableHScrollBar id="horizontalScrollBar"
		visible="false"/>

	<resize:ResizeHandleLines id="resizeHandle"
		enabled="{resizeManager.enabled}"
		height="{Math.max(12, horizontalScrollBar.height-2)}"
		width="{Math.max(12, verticalScrollBar.width-2)}"
		visible="{resizeManager.enabled}"/>

</s:SparkSkin>
